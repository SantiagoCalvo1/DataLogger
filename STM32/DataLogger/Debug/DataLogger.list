
DataLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000393c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003a48  08003a48  00013a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a88  08003a88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a88  08003a88  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a88  08003a88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a88  08003a88  00013a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a8c  08003a8c  00013a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  08003a9c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003a9c  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b830  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d53  00000000  00000000  0002b865  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d38  00000000  00000000  0002d5b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c40  00000000  00000000  0002e2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000142a6  00000000  00000000  0002ef30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000998f  00000000  00000000  000431d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072c37  00000000  00000000  0004cb65  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bf79c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036e4  00000000  00000000  000bf818  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a30 	.word	0x08003a30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003a30 	.word	0x08003a30

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fc75 	bl	8000a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f8d5 	bl	8000304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f9f7 	bl	800054c <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 f9d7 	bl	8000510 <MX_DMA_Init>
  MX_ADC1_Init();
 8000162:	f000 f91f 	bl	80003a4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000166:	f000 f95b 	bl	8000420 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800016a:	f000 f9a7 	bl	80004bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  flag_cambio = 0;
 800016e:	4b5a      	ldr	r3, [pc, #360]	; (80002d8 <main+0x18c>)
 8000170:	2200      	movs	r2, #0
 8000172:	701a      	strb	r2, [r3, #0]
  flag_actual = NADA;
 8000174:	4b59      	ldr	r3, [pc, #356]	; (80002dc <main+0x190>)
 8000176:	224e      	movs	r2, #78	; 0x4e
 8000178:	701a      	strb	r2, [r3, #0]
  adc_index = 0;
 800017a:	4b59      	ldr	r3, [pc, #356]	; (80002e0 <main+0x194>)
 800017c:	2200      	movs	r2, #0
 800017e:	801a      	strh	r2, [r3, #0]
  error_buffer = 0;
 8000180:	4b58      	ldr	r3, [pc, #352]	; (80002e4 <main+0x198>)
 8000182:	2200      	movs	r2, #0
 8000184:	701a      	strb	r2, [r3, #0]

  // LLenar el buffer para pruebas
  for (uint16_t i=0; i<BUFFER_SIZE; i++){
 8000186:	2300      	movs	r3, #0
 8000188:	80fb      	strh	r3, [r7, #6]
 800018a:	e010      	b.n	80001ae <main+0x62>
	  adc_buffer[i] = i%255;
 800018c:	88fa      	ldrh	r2, [r7, #6]
 800018e:	4b56      	ldr	r3, [pc, #344]	; (80002e8 <main+0x19c>)
 8000190:	fba3 1302 	umull	r1, r3, r3, r2
 8000194:	09d9      	lsrs	r1, r3, #7
 8000196:	460b      	mov	r3, r1
 8000198:	021b      	lsls	r3, r3, #8
 800019a:	1a5b      	subs	r3, r3, r1
 800019c:	1ad3      	subs	r3, r2, r3
 800019e:	b29a      	uxth	r2, r3
 80001a0:	88fb      	ldrh	r3, [r7, #6]
 80001a2:	b2d1      	uxtb	r1, r2
 80001a4:	4a51      	ldr	r2, [pc, #324]	; (80002ec <main+0x1a0>)
 80001a6:	54d1      	strb	r1, [r2, r3]
  for (uint16_t i=0; i<BUFFER_SIZE; i++){
 80001a8:	88fb      	ldrh	r3, [r7, #6]
 80001aa:	3301      	adds	r3, #1
 80001ac:	80fb      	strh	r3, [r7, #6]
 80001ae:	88fb      	ldrh	r3, [r7, #6]
 80001b0:	2b09      	cmp	r3, #9
 80001b2:	d9eb      	bls.n	800018c <main+0x40>
  }

  HAL_ADCEx_Calibration_Start(&hadc1);
 80001b4:	484e      	ldr	r0, [pc, #312]	; (80002f0 <main+0x1a4>)
 80001b6:	f001 f8e5 	bl	8001384 <HAL_ADCEx_Calibration_Start>
  //HAL_ADC_Start_IT(&hadc1);
  //HAL_TIM_Base_Start(&htim3);
  HAL_UART_Receive_IT(&huart2, &rx_dato, 1);
 80001ba:	2201      	movs	r2, #1
 80001bc:	494d      	ldr	r1, [pc, #308]	; (80002f4 <main+0x1a8>)
 80001be:	484e      	ldr	r0, [pc, #312]	; (80002f8 <main+0x1ac>)
 80001c0:	f002 ff62 	bl	8003088 <HAL_UART_Receive_IT>
		  // Toggle solo para ubicar donde est치
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		  HAL_Delay(200);
	  }
	  */
	  if (flag_cambio == 1){
 80001c4:	4b44      	ldr	r3, [pc, #272]	; (80002d8 <main+0x18c>)
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	2b01      	cmp	r3, #1
 80001ca:	d1fb      	bne.n	80001c4 <main+0x78>
		switch (flag_actual)
 80001cc:	4b43      	ldr	r3, [pc, #268]	; (80002dc <main+0x190>)
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	3b41      	subs	r3, #65	; 0x41
 80001d2:	2b0d      	cmp	r3, #13
 80001d4:	d858      	bhi.n	8000288 <main+0x13c>
 80001d6:	a201      	add	r2, pc, #4	; (adr r2, 80001dc <main+0x90>)
 80001d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001dc:	08000269 	.word	0x08000269
 80001e0:	08000289 	.word	0x08000289
 80001e4:	0800024d 	.word	0x0800024d
 80001e8:	08000289 	.word	0x08000289
 80001ec:	08000215 	.word	0x08000215
 80001f0:	08000289 	.word	0x08000289
 80001f4:	08000289 	.word	0x08000289
 80001f8:	08000289 	.word	0x08000289
 80001fc:	08000289 	.word	0x08000289
 8000200:	08000289 	.word	0x08000289
 8000204:	08000289 	.word	0x08000289
 8000208:	08000289 	.word	0x08000289
 800020c:	08000289 	.word	0x08000289
 8000210:	08000255 	.word	0x08000255
		{
		case ENVIAR_BUFFER:
			flag_actual = ENVIAR_BUFFER;
 8000214:	4b31      	ldr	r3, [pc, #196]	; (80002dc <main+0x190>)
 8000216:	2245      	movs	r2, #69	; 0x45
 8000218:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, &flag_actual, 1, 1);
 800021a:	2301      	movs	r3, #1
 800021c:	2201      	movs	r2, #1
 800021e:	492f      	ldr	r1, [pc, #188]	; (80002dc <main+0x190>)
 8000220:	4835      	ldr	r0, [pc, #212]	; (80002f8 <main+0x1ac>)
 8000222:	f002 fe98 	bl	8002f56 <HAL_UART_Transmit>
			// Detiene el TIM3 y por lo tento el ADC
			HAL_ADC_Stop_IT(&hadc1);
 8000226:	4832      	ldr	r0, [pc, #200]	; (80002f0 <main+0x1a4>)
 8000228:	f000 fe1c 	bl	8000e64 <HAL_ADC_Stop_IT>
			HAL_TIM_Base_Stop(&htim3);
 800022c:	4833      	ldr	r0, [pc, #204]	; (80002fc <main+0x1b0>)
 800022e:	f002 fc27 	bl	8002a80 <HAL_TIM_Base_Stop>
			// Verifica si hubo error por overflow en el adc_buffer
			if (error_buffer == 1){
 8000232:	4b2c      	ldr	r3, [pc, #176]	; (80002e4 <main+0x198>)
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	2b01      	cmp	r3, #1
 8000238:	d102      	bne.n	8000240 <main+0xf4>
				// Significa que el buffer hizo overflow y se sobreescribieron datos
				adc_buffer[0] = 0xFF;
 800023a:	4b2c      	ldr	r3, [pc, #176]	; (80002ec <main+0x1a0>)
 800023c:	22ff      	movs	r2, #255	; 0xff
 800023e:	701a      	strb	r2, [r3, #0]
				// El c칩digo 0xFF indica que hubo error. El ADC est치 mapeado de 0 a 254.
			}
			// Activa transmisi칩n DMA del buffer
			HAL_UART_Transmit_DMA(&huart2, adc_buffer, BUFFER_SIZE);
 8000240:	220a      	movs	r2, #10
 8000242:	492a      	ldr	r1, [pc, #168]	; (80002ec <main+0x1a0>)
 8000244:	482c      	ldr	r0, [pc, #176]	; (80002f8 <main+0x1ac>)
 8000246:	f002 ff73 	bl	8003130 <HAL_UART_Transmit_DMA>
			// En el callback del Tx se sale de este modo
			break;
 800024a:	e025      	b.n	8000298 <main+0x14c>

		case CONFIGURAR:
			flag_actual = CONFIGURAR;
 800024c:	4b23      	ldr	r3, [pc, #140]	; (80002dc <main+0x190>)
 800024e:	2243      	movs	r2, #67	; 0x43
 8000250:	701a      	strb	r2, [r3, #0]
			// Completar
			break;
 8000252:	e021      	b.n	8000298 <main+0x14c>

		case NADA:
			flag_actual = NADA;
 8000254:	4b21      	ldr	r3, [pc, #132]	; (80002dc <main+0x190>)
 8000256:	224e      	movs	r2, #78	; 0x4e
 8000258:	701a      	strb	r2, [r3, #0]
			// Se frena al ADC
			HAL_ADC_Stop_IT(&hadc1);
 800025a:	4825      	ldr	r0, [pc, #148]	; (80002f0 <main+0x1a4>)
 800025c:	f000 fe02 	bl	8000e64 <HAL_ADC_Stop_IT>
			HAL_TIM_Base_Stop(&htim3);
 8000260:	4826      	ldr	r0, [pc, #152]	; (80002fc <main+0x1b0>)
 8000262:	f002 fc0d 	bl	8002a80 <HAL_TIM_Base_Stop>
			break;
 8000266:	e017      	b.n	8000298 <main+0x14c>

		case ADQUIRIR:
			flag_actual = ADQUIRIR;
 8000268:	4b1c      	ldr	r3, [pc, #112]	; (80002dc <main+0x190>)
 800026a:	2241      	movs	r2, #65	; 0x41
 800026c:	701a      	strb	r2, [r3, #0]
			// Se resetea index_adc
			adc_index = 0;
 800026e:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <main+0x194>)
 8000270:	2200      	movs	r2, #0
 8000272:	801a      	strh	r2, [r3, #0]
			// Se resetea el error del buffer
			error_buffer = 0;
 8000274:	4b1b      	ldr	r3, [pc, #108]	; (80002e4 <main+0x198>)
 8000276:	2200      	movs	r2, #0
 8000278:	701a      	strb	r2, [r3, #0]
			// Comienza el ADC IT (se renueva dentro de la misma rutina)
			HAL_ADC_Start_IT(&hadc1);
 800027a:	481d      	ldr	r0, [pc, #116]	; (80002f0 <main+0x1a4>)
 800027c:	f000 fd3c 	bl	8000cf8 <HAL_ADC_Start_IT>
			// Comienza el TIM3 para disparar al ADC
			HAL_TIM_Base_Start(&htim3);
 8000280:	481e      	ldr	r0, [pc, #120]	; (80002fc <main+0x1b0>)
 8000282:	f002 fbda 	bl	8002a3a <HAL_TIM_Base_Start>
			break;
 8000286:	e007      	b.n	8000298 <main+0x14c>

		default:
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000288:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800028c:	481c      	ldr	r0, [pc, #112]	; (8000300 <main+0x1b4>)
 800028e:	f001 fe03 	bl	8001e98 <HAL_GPIO_TogglePin>
			flag_actual = 0;
 8000292:	4b12      	ldr	r3, [pc, #72]	; (80002dc <main+0x190>)
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
		}
		// El flag tiene que dejar de estar en cambio de flag
		flag_cambio = 0;
 8000298:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <main+0x18c>)
 800029a:	2200      	movs	r2, #0
 800029c:	701a      	strb	r2, [r3, #0]
		// Una vez hecho lo que habia que hacer, se activan Rx_IT
		// Y se confirma recepcion
		if ((flag_actual != ENVIAR_BUFFER) && (flag_actual != 0)){
 800029e:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <main+0x190>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b45      	cmp	r3, #69	; 0x45
 80002a4:	d00e      	beq.n	80002c4 <main+0x178>
 80002a6:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <main+0x190>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d00a      	beq.n	80002c4 <main+0x178>
			HAL_UART_Transmit(&huart2, &flag_actual, 1, 1);
 80002ae:	2301      	movs	r3, #1
 80002b0:	2201      	movs	r2, #1
 80002b2:	490a      	ldr	r1, [pc, #40]	; (80002dc <main+0x190>)
 80002b4:	4810      	ldr	r0, [pc, #64]	; (80002f8 <main+0x1ac>)
 80002b6:	f002 fe4e 	bl	8002f56 <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart2, &rx_dato, 1);
 80002ba:	2201      	movs	r2, #1
 80002bc:	490d      	ldr	r1, [pc, #52]	; (80002f4 <main+0x1a8>)
 80002be:	480e      	ldr	r0, [pc, #56]	; (80002f8 <main+0x1ac>)
 80002c0:	f002 fee2 	bl	8003088 <HAL_UART_Receive_IT>
		}
		if (flag_actual == 0){
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <main+0x190>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	f47f af7b 	bne.w	80001c4 <main+0x78>
			flag_actual = NADA;
 80002ce:	4b03      	ldr	r3, [pc, #12]	; (80002dc <main+0x190>)
 80002d0:	224e      	movs	r2, #78	; 0x4e
 80002d2:	701a      	strb	r2, [r3, #0]
	  if (flag_cambio == 1){
 80002d4:	e776      	b.n	80001c4 <main+0x78>
 80002d6:	bf00      	nop
 80002d8:	20000029 	.word	0x20000029
 80002dc:	20000130 	.word	0x20000130
 80002e0:	200000e0 	.word	0x200000e0
 80002e4:	20000028 	.word	0x20000028
 80002e8:	80808081 	.word	0x80808081
 80002ec:	200000e4 	.word	0x200000e4
 80002f0:	2000006c 	.word	0x2000006c
 80002f4:	200000e2 	.word	0x200000e2
 80002f8:	200000f0 	.word	0x200000f0
 80002fc:	2000002c 	.word	0x2000002c
 8000300:	40011000 	.word	0x40011000

08000304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b094      	sub	sp, #80	; 0x50
 8000308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800030e:	2228      	movs	r2, #40	; 0x28
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f003 fb84 	bl	8003a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000318:	f107 0314 	add.w	r3, r7, #20
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
 8000324:	60da      	str	r2, [r3, #12]
 8000326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000334:	2302      	movs	r3, #2
 8000336:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000338:	2301      	movs	r3, #1
 800033a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033c:	2310      	movs	r3, #16
 800033e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000340:	2300      	movs	r3, #0
 8000342:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000344:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000348:	4618      	mov	r0, r3
 800034a:	f001 fdbd 	bl	8001ec8 <HAL_RCC_OscConfig>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000354:	f000 f9b4 	bl	80006c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000358:	230f      	movs	r3, #15
 800035a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800035c:	2300      	movs	r3, #0
 800035e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800036c:	f107 0314 	add.w	r3, r7, #20
 8000370:	2100      	movs	r1, #0
 8000372:	4618      	mov	r0, r3
 8000374:	f002 f828 	bl	80023c8 <HAL_RCC_ClockConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800037e:	f000 f99f 	bl	80006c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000382:	2302      	movs	r3, #2
 8000384:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000386:	2300      	movs	r3, #0
 8000388:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4618      	mov	r0, r3
 800038e:	f002 f9b7 	bl	8002700 <HAL_RCCEx_PeriphCLKConfig>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000398:	f000 f992 	bl	80006c0 <Error_Handler>
  }
}
 800039c:	bf00      	nop
 800039e:	3750      	adds	r7, #80	; 0x50
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003b4:	4b18      	ldr	r3, [pc, #96]	; (8000418 <MX_ADC1_Init+0x74>)
 80003b6:	4a19      	ldr	r2, [pc, #100]	; (800041c <MX_ADC1_Init+0x78>)
 80003b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ba:	4b17      	ldr	r3, [pc, #92]	; (8000418 <MX_ADC1_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003c0:	4b15      	ldr	r3, [pc, #84]	; (8000418 <MX_ADC1_Init+0x74>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003c6:	4b14      	ldr	r3, [pc, #80]	; (8000418 <MX_ADC1_Init+0x74>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80003cc:	4b12      	ldr	r3, [pc, #72]	; (8000418 <MX_ADC1_Init+0x74>)
 80003ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80003d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003d4:	4b10      	ldr	r3, [pc, #64]	; (8000418 <MX_ADC1_Init+0x74>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80003da:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <MX_ADC1_Init+0x74>)
 80003dc:	2201      	movs	r2, #1
 80003de:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003e0:	480d      	ldr	r0, [pc, #52]	; (8000418 <MX_ADC1_Init+0x74>)
 80003e2:	f000 fbb1 	bl	8000b48 <HAL_ADC_Init>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80003ec:	f000 f968 	bl	80006c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003f4:	2301      	movs	r3, #1
 80003f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80003f8:	2307      	movs	r3, #7
 80003fa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	4619      	mov	r1, r3
 8000400:	4805      	ldr	r0, [pc, #20]	; (8000418 <MX_ADC1_Init+0x74>)
 8000402:	f000 fe3b 	bl	800107c <HAL_ADC_ConfigChannel>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800040c:	f000 f958 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000410:	bf00      	nop
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	2000006c 	.word	0x2000006c
 800041c:	40012400 	.word	0x40012400

08000420 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000426:	f107 0308 	add.w	r3, r7, #8
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000434:	463b      	mov	r3, r7
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800043c:	4b1d      	ldr	r3, [pc, #116]	; (80004b4 <MX_TIM3_Init+0x94>)
 800043e:	4a1e      	ldr	r2, [pc, #120]	; (80004b8 <MX_TIM3_Init+0x98>)
 8000440:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000442:	4b1c      	ldr	r3, [pc, #112]	; (80004b4 <MX_TIM3_Init+0x94>)
 8000444:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000448:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800044a:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <MX_TIM3_Init+0x94>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000450:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <MX_TIM3_Init+0x94>)
 8000452:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000456:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000458:	4b16      	ldr	r3, [pc, #88]	; (80004b4 <MX_TIM3_Init+0x94>)
 800045a:	2200      	movs	r2, #0
 800045c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800045e:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <MX_TIM3_Init+0x94>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000464:	4813      	ldr	r0, [pc, #76]	; (80004b4 <MX_TIM3_Init+0x94>)
 8000466:	f002 fabd 	bl	80029e4 <HAL_TIM_Base_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000470:	f000 f926 	bl	80006c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000478:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800047a:	f107 0308 	add.w	r3, r7, #8
 800047e:	4619      	mov	r1, r3
 8000480:	480c      	ldr	r0, [pc, #48]	; (80004b4 <MX_TIM3_Init+0x94>)
 8000482:	f002 fb27 	bl	8002ad4 <HAL_TIM_ConfigClockSource>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800048c:	f000 f918 	bl	80006c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000490:	2320      	movs	r3, #32
 8000492:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000498:	463b      	mov	r3, r7
 800049a:	4619      	mov	r1, r3
 800049c:	4805      	ldr	r0, [pc, #20]	; (80004b4 <MX_TIM3_Init+0x94>)
 800049e:	f002 fcc9 	bl	8002e34 <HAL_TIMEx_MasterConfigSynchronization>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80004a8:	f000 f90a 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80004ac:	bf00      	nop
 80004ae:	3718      	adds	r7, #24
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	2000002c 	.word	0x2000002c
 80004b8:	40000400 	.word	0x40000400

080004bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004c0:	4b11      	ldr	r3, [pc, #68]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004c2:	4a12      	ldr	r2, [pc, #72]	; (800050c <MX_USART2_UART_Init+0x50>)
 80004c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004c6:	4b10      	ldr	r3, [pc, #64]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004e0:	4b09      	ldr	r3, [pc, #36]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004e2:	220c      	movs	r2, #12
 80004e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004f2:	4805      	ldr	r0, [pc, #20]	; (8000508 <MX_USART2_UART_Init+0x4c>)
 80004f4:	f002 fce2 	bl	8002ebc <HAL_UART_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004fe:	f000 f8df 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	200000f0 	.word	0x200000f0
 800050c:	40004400 	.word	0x40004400

08000510 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <MX_DMA_Init+0x38>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <MX_DMA_Init+0x38>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6153      	str	r3, [r2, #20]
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <MX_DMA_Init+0x38>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800052e:	2200      	movs	r2, #0
 8000530:	2100      	movs	r1, #0
 8000532:	2011      	movs	r0, #17
 8000534:	f001 f8a3 	bl	800167e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000538:	2011      	movs	r0, #17
 800053a:	f001 f8bc 	bl	80016b6 <HAL_NVIC_EnableIRQ>

}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000

0800054c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	f107 0308 	add.w	r3, r7, #8
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000560:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <MX_GPIO_Init+0x78>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a17      	ldr	r2, [pc, #92]	; (80005c4 <MX_GPIO_Init+0x78>)
 8000566:	f043 0310 	orr.w	r3, r3, #16
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <MX_GPIO_Init+0x78>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0310 	and.w	r3, r3, #16
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <MX_GPIO_Init+0x78>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a11      	ldr	r2, [pc, #68]	; (80005c4 <MX_GPIO_Init+0x78>)
 800057e:	f043 0304 	orr.w	r3, r3, #4
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <MX_GPIO_Init+0x78>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0304 	and.w	r3, r3, #4
 800058c:	603b      	str	r3, [r7, #0]
 800058e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000596:	480c      	ldr	r0, [pc, #48]	; (80005c8 <MX_GPIO_Init+0x7c>)
 8000598:	f001 fc66 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800059c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2302      	movs	r3, #2
 80005ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 0308 	add.w	r3, r7, #8
 80005b2:	4619      	mov	r1, r3
 80005b4:	4804      	ldr	r0, [pc, #16]	; (80005c8 <MX_GPIO_Init+0x7c>)
 80005b6:	f001 fafd 	bl	8001bb4 <HAL_GPIO_Init>

}
 80005ba:	bf00      	nop
 80005bc:	3718      	adds	r7, #24
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40011000 	.word	0x40011000

080005cc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	// Toggle para visual
	// HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	// Se agrega un dato al buffer
	// Pasa el valor del ADC de 12 bits a 8 bits
	uint8_t valorADC = (HAL_ADC_GetValue(&hadc1) & 0xFF0) >> 4;
 80005d4:	4812      	ldr	r0, [pc, #72]	; (8000620 <HAL_ADC_ConvCpltCallback+0x54>)
 80005d6:	f000 fc79 	bl	8000ecc <HAL_ADC_GetValue>
 80005da:	4603      	mov	r3, r0
 80005dc:	091b      	lsrs	r3, r3, #4
 80005de:	73fb      	strb	r3, [r7, #15]
	// El 0xFF es el c칩digo para indicar error asi que no puede ser usado
	if (valorADC == 0xFF)
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	2bff      	cmp	r3, #255	; 0xff
 80005e4:	d101      	bne.n	80005ea <HAL_ADC_ConvCpltCallback+0x1e>
		valorADC = 254;
 80005e6:	23fe      	movs	r3, #254	; 0xfe
 80005e8:	73fb      	strb	r3, [r7, #15]
	adc_buffer[adc_index] = valorADC;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <HAL_ADC_ConvCpltCallback+0x58>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	4619      	mov	r1, r3
 80005f0:	4a0d      	ldr	r2, [pc, #52]	; (8000628 <HAL_ADC_ConvCpltCallback+0x5c>)
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	5453      	strb	r3, [r2, r1]
	// Se incrementa el adc_index
	adc_index++;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <HAL_ADC_ConvCpltCallback+0x58>)
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	3301      	adds	r3, #1
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <HAL_ADC_ConvCpltCallback+0x58>)
 8000600:	801a      	strh	r2, [r3, #0]
	if (adc_index >= BUFFER_SIZE){
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <HAL_ADC_ConvCpltCallback+0x58>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	2b09      	cmp	r3, #9
 8000608:	d905      	bls.n	8000616 <HAL_ADC_ConvCpltCallback+0x4a>
		adc_index = 0;
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_ADC_ConvCpltCallback+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	801a      	strh	r2, [r3, #0]
		error_buffer = 1;
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <HAL_ADC_ConvCpltCallback+0x60>)
 8000612:	2201      	movs	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]
	}
}
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	2000006c 	.word	0x2000006c
 8000624:	200000e0 	.word	0x200000e0
 8000628:	200000e4 	.word	0x200000e4
 800062c:	20000028 	.word	0x20000028

08000630 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000638:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800063c:	480f      	ldr	r0, [pc, #60]	; (800067c <HAL_UART_TxCpltCallback+0x4c>)
 800063e:	f001 fc2b 	bl	8001e98 <HAL_GPIO_TogglePin>
	// Vuelve a esperar para recibir dato
	HAL_UART_Receive_IT(&huart2, &rx_dato, 1);
 8000642:	2201      	movs	r2, #1
 8000644:	490e      	ldr	r1, [pc, #56]	; (8000680 <HAL_UART_TxCpltCallback+0x50>)
 8000646:	480f      	ldr	r0, [pc, #60]	; (8000684 <HAL_UART_TxCpltCallback+0x54>)
 8000648:	f002 fd1e 	bl	8003088 <HAL_UART_Receive_IT>
	// Resetea los contenidos del buffer
	for (uint16_t i=0; i<BUFFER_SIZE; i++){
 800064c:	2300      	movs	r3, #0
 800064e:	81fb      	strh	r3, [r7, #14]
 8000650:	e006      	b.n	8000660 <HAL_UART_TxCpltCallback+0x30>
		adc_buffer[i] = 0;
 8000652:	89fb      	ldrh	r3, [r7, #14]
 8000654:	4a0c      	ldr	r2, [pc, #48]	; (8000688 <HAL_UART_TxCpltCallback+0x58>)
 8000656:	2100      	movs	r1, #0
 8000658:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i=0; i<BUFFER_SIZE; i++){
 800065a:	89fb      	ldrh	r3, [r7, #14]
 800065c:	3301      	adds	r3, #1
 800065e:	81fb      	strh	r3, [r7, #14]
 8000660:	89fb      	ldrh	r3, [r7, #14]
 8000662:	2b09      	cmp	r3, #9
 8000664:	d9f5      	bls.n	8000652 <HAL_UART_TxCpltCallback+0x22>
	}
	// Sale del modo enviar
	flag_cambio = 1;
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <HAL_UART_TxCpltCallback+0x5c>)
 8000668:	2201      	movs	r2, #1
 800066a:	701a      	strb	r2, [r3, #0]
	flag_actual = 0;
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <HAL_UART_TxCpltCallback+0x60>)
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40011000 	.word	0x40011000
 8000680:	200000e2 	.word	0x200000e2
 8000684:	200000f0 	.word	0x200000f0
 8000688:	200000e4 	.word	0x200000e4
 800068c:	20000029 	.word	0x20000029
 8000690:	20000130 	.word	0x20000130

08000694 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	flag_cambio = 1;
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <HAL_UART_RxCpltCallback+0x20>)
 800069e:	2201      	movs	r2, #1
 80006a0:	701a      	strb	r2, [r3, #0]
	flag_actual = rx_dato;
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <HAL_UART_RxCpltCallback+0x24>)
 80006a4:	781a      	ldrb	r2, [r3, #0]
 80006a6:	4b05      	ldr	r3, [pc, #20]	; (80006bc <HAL_UART_RxCpltCallback+0x28>)
 80006a8:	701a      	strb	r2, [r3, #0]
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	20000029 	.word	0x20000029
 80006b8:	200000e2 	.word	0x200000e2
 80006bc:	20000130 	.word	0x20000130

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1){
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c8:	4803      	ldr	r0, [pc, #12]	; (80006d8 <Error_Handler+0x18>)
 80006ca:	f001 fbe5 	bl	8001e98 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 80006ce:	20c8      	movs	r0, #200	; 0xc8
 80006d0:	f000 fa18 	bl	8000b04 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006d4:	e7f6      	b.n	80006c4 <Error_Handler+0x4>
 80006d6:	bf00      	nop
 80006d8:	40011000 	.word	0x40011000

080006dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <HAL_MspInit+0x5c>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	4a14      	ldr	r2, [pc, #80]	; (8000738 <HAL_MspInit+0x5c>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6193      	str	r3, [r2, #24]
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <HAL_MspInit+0x5c>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <HAL_MspInit+0x5c>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <HAL_MspInit+0x5c>)
 8000700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000704:	61d3      	str	r3, [r2, #28]
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <HAL_MspInit+0x5c>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <HAL_MspInit+0x60>)
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	4a04      	ldr	r2, [pc, #16]	; (800073c <HAL_MspInit+0x60>)
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072e:	bf00      	nop
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	40021000 	.word	0x40021000
 800073c:	40010000 	.word	0x40010000

08000740 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 0310 	add.w	r3, r7, #16
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a18      	ldr	r2, [pc, #96]	; (80007bc <HAL_ADC_MspInit+0x7c>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d129      	bne.n	80007b4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <HAL_ADC_MspInit+0x80>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a16      	ldr	r2, [pc, #88]	; (80007c0 <HAL_ADC_MspInit+0x80>)
 8000766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800076a:	6193      	str	r3, [r2, #24]
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <HAL_ADC_MspInit+0x80>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <HAL_ADC_MspInit+0x80>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a10      	ldr	r2, [pc, #64]	; (80007c0 <HAL_ADC_MspInit+0x80>)
 800077e:	f043 0304 	orr.w	r3, r3, #4
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <HAL_ADC_MspInit+0x80>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000790:	2301      	movs	r3, #1
 8000792:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000794:	2303      	movs	r3, #3
 8000796:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000798:	f107 0310 	add.w	r3, r7, #16
 800079c:	4619      	mov	r1, r3
 800079e:	4809      	ldr	r0, [pc, #36]	; (80007c4 <HAL_ADC_MspInit+0x84>)
 80007a0:	f001 fa08 	bl	8001bb4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2100      	movs	r1, #0
 80007a8:	2012      	movs	r0, #18
 80007aa:	f000 ff68 	bl	800167e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80007ae:	2012      	movs	r0, #18
 80007b0:	f000 ff81 	bl	80016b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40012400 	.word	0x40012400
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40010800 	.word	0x40010800

080007c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a09      	ldr	r2, [pc, #36]	; (80007fc <HAL_TIM_Base_MspInit+0x34>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d10b      	bne.n	80007f2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_TIM_Base_MspInit+0x38>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_TIM_Base_MspInit+0x38>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	61d3      	str	r3, [r2, #28]
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_TIM_Base_MspInit+0x38>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80007f2:	bf00      	nop
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	40000400 	.word	0x40000400
 8000800:	40021000 	.word	0x40021000

08000804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a32      	ldr	r2, [pc, #200]	; (80008e8 <HAL_UART_MspInit+0xe4>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d15d      	bne.n	80008e0 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000824:	4b31      	ldr	r3, [pc, #196]	; (80008ec <HAL_UART_MspInit+0xe8>)
 8000826:	69db      	ldr	r3, [r3, #28]
 8000828:	4a30      	ldr	r2, [pc, #192]	; (80008ec <HAL_UART_MspInit+0xe8>)
 800082a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082e:	61d3      	str	r3, [r2, #28]
 8000830:	4b2e      	ldr	r3, [pc, #184]	; (80008ec <HAL_UART_MspInit+0xe8>)
 8000832:	69db      	ldr	r3, [r3, #28]
 8000834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	4b2b      	ldr	r3, [pc, #172]	; (80008ec <HAL_UART_MspInit+0xe8>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a2a      	ldr	r2, [pc, #168]	; (80008ec <HAL_UART_MspInit+0xe8>)
 8000842:	f043 0304 	orr.w	r3, r3, #4
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b28      	ldr	r3, [pc, #160]	; (80008ec <HAL_UART_MspInit+0xe8>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f003 0304 	and.w	r3, r3, #4
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000854:	2304      	movs	r3, #4
 8000856:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800085c:	2303      	movs	r3, #3
 800085e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	4619      	mov	r1, r3
 8000866:	4822      	ldr	r0, [pc, #136]	; (80008f0 <HAL_UART_MspInit+0xec>)
 8000868:	f001 f9a4 	bl	8001bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800086c:	2308      	movs	r3, #8
 800086e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	4619      	mov	r1, r3
 800087e:	481c      	ldr	r0, [pc, #112]	; (80008f0 <HAL_UART_MspInit+0xec>)
 8000880:	f001 f998 	bl	8001bb4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <HAL_UART_MspInit+0xf0>)
 8000886:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <HAL_UART_MspInit+0xf4>)
 8000888:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <HAL_UART_MspInit+0xf0>)
 800088c:	2210      	movs	r2, #16
 800088e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <HAL_UART_MspInit+0xf0>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_UART_MspInit+0xf0>)
 8000898:	2280      	movs	r2, #128	; 0x80
 800089a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_UART_MspInit+0xf0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_UART_MspInit+0xf0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_UART_MspInit+0xf0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <HAL_UART_MspInit+0xf0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80008b4:	480f      	ldr	r0, [pc, #60]	; (80008f4 <HAL_UART_MspInit+0xf0>)
 80008b6:	f000 ff19 	bl	80016ec <HAL_DMA_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80008c0:	f7ff fefe 	bl	80006c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a0b      	ldr	r2, [pc, #44]	; (80008f4 <HAL_UART_MspInit+0xf0>)
 80008c8:	631a      	str	r2, [r3, #48]	; 0x30
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <HAL_UART_MspInit+0xf0>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	2026      	movs	r0, #38	; 0x26
 80008d6:	f000 fed2 	bl	800167e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008da:	2026      	movs	r0, #38	; 0x26
 80008dc:	f000 feeb 	bl	80016b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e0:	bf00      	nop
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40004400 	.word	0x40004400
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40010800 	.word	0x40010800
 80008f4:	2000009c 	.word	0x2000009c
 80008f8:	40020080 	.word	0x40020080

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <HardFault_Handler+0x4>

0800090e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <MemManage_Handler+0x4>

08000914 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <BusFault_Handler+0x4>

0800091a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <UsageFault_Handler+0x4>

08000920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000948:	f000 f8c0 	bl	8000acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <DMA1_Channel7_IRQHandler+0x10>)
 8000956:	f000 fff9 	bl	800194c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000009c 	.word	0x2000009c

08000964 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <ADC1_2_IRQHandler+0x10>)
 800096a:	f000 fabb 	bl	8000ee4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2000006c 	.word	0x2000006c

08000978 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <USART2_IRQHandler+0x10>)
 800097e:	f002 fc43 	bl	8003208 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000f0 	.word	0x200000f0

0800098c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <SystemInit+0x5c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <SystemInit+0x5c>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <SystemInit+0x5c>)
 800099e:	685a      	ldr	r2, [r3, #4]
 80009a0:	4911      	ldr	r1, [pc, #68]	; (80009e8 <SystemInit+0x5c>)
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <SystemInit+0x60>)
 80009a4:	4013      	ands	r3, r2
 80009a6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <SystemInit+0x5c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <SystemInit+0x5c>)
 80009ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80009b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <SystemInit+0x5c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <SystemInit+0x5c>)
 80009be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <SystemInit+0x5c>)
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <SystemInit+0x5c>)
 80009ca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80009ce:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <SystemInit+0x5c>)
 80009d2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80009d6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <SystemInit+0x64>)
 80009da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009de:	609a      	str	r2, [r3, #8]
#endif 
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	40021000 	.word	0x40021000
 80009ec:	f8ff0000 	.word	0xf8ff0000
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009f6:	e003      	b.n	8000a00 <LoopCopyDataInit>

080009f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80009fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009fe:	3104      	adds	r1, #4

08000a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a00:	480a      	ldr	r0, [pc, #40]	; (8000a2c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a04:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a06:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a08:	d3f6      	bcc.n	80009f8 <CopyDataInit>
  ldr r2, =_sbss
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a0c:	e002      	b.n	8000a14 <LoopFillZerobss>

08000a0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a10:	f842 3b04 	str.w	r3, [r2], #4

08000a14 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a16:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a18:	d3f9      	bcc.n	8000a0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a1a:	f7ff ffb7 	bl	800098c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a1e:	f002 ffdb 	bl	80039d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a22:	f7ff fb93 	bl	800014c <main>
  bx lr
 8000a26:	4770      	bx	lr
  ldr r3, =_sidata
 8000a28:	08003a90 	.word	0x08003a90
  ldr r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a30:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000a34:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000a38:	20000138 	.word	0x20000138

08000a3c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a3c:	e7fe      	b.n	8000a3c <CAN1_RX1_IRQHandler>
	...

08000a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <HAL_Init+0x28>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <HAL_Init+0x28>)
 8000a4a:	f043 0310 	orr.w	r3, r3, #16
 8000a4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a50:	2003      	movs	r0, #3
 8000a52:	f000 fe09 	bl	8001668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f000 f808 	bl	8000a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a5c:	f7ff fe3e 	bl	80006dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40022000 	.word	0x40022000

08000a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_InitTick+0x54>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_InitTick+0x58>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 fe21 	bl	80016d2 <HAL_SYSTICK_Config>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00e      	b.n	8000ab8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b0f      	cmp	r3, #15
 8000a9e:	d80a      	bhi.n	8000ab6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	f000 fde9 	bl	800167e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aac:	4a06      	ldr	r2, [pc, #24]	; (8000ac8 <HAL_InitTick+0x5c>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e000      	b.n	8000ab8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000004 	.word	0x20000004

08000acc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <HAL_IncTick+0x1c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b05      	ldr	r3, [pc, #20]	; (8000aec <HAL_IncTick+0x20>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	4a03      	ldr	r2, [pc, #12]	; (8000aec <HAL_IncTick+0x20>)
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000134 	.word	0x20000134

08000af0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;
 8000af4:	4b02      	ldr	r3, [pc, #8]	; (8000b00 <HAL_GetTick+0x10>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	20000134 	.word	0x20000134

08000b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b0c:	f7ff fff0 	bl	8000af0 <HAL_GetTick>
 8000b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b1c:	d005      	beq.n	8000b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_Delay+0x40>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4413      	add	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b2a:	bf00      	nop
 8000b2c:	f7ff ffe0 	bl	8000af0 <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d8f7      	bhi.n	8000b2c <HAL_Delay+0x28>
  {
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000008 	.word	0x20000008

08000b48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b50:	2300      	movs	r3, #0
 8000b52:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d101      	bne.n	8000b6a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e0be      	b.n	8000ce8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d109      	bne.n	8000b8c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff fdda 	bl	8000740 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f000 fbbf 	bl	8001310 <ADC_ConversionStop_Disable>
 8000b92:	4603      	mov	r3, r0
 8000b94:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9a:	f003 0310 	and.w	r3, r3, #16
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f040 8099 	bne.w	8000cd6 <HAL_ADC_Init+0x18e>
 8000ba4:	7dfb      	ldrb	r3, [r7, #23]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8095 	bne.w	8000cd6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bb4:	f023 0302 	bic.w	r3, r3, #2
 8000bb8:	f043 0202 	orr.w	r2, r3, #2
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bc8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	7b1b      	ldrb	r3, [r3, #12]
 8000bce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bd0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000be0:	d003      	beq.n	8000bea <HAL_ADC_Init+0xa2>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d102      	bne.n	8000bf0 <HAL_ADC_Init+0xa8>
 8000bea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bee:	e000      	b.n	8000bf2 <HAL_ADC_Init+0xaa>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	7d1b      	ldrb	r3, [r3, #20]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d119      	bne.n	8000c34 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	7b1b      	ldrb	r3, [r3, #12]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d109      	bne.n	8000c1c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	035a      	lsls	r2, r3, #13
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	e00b      	b.n	8000c34 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c20:	f043 0220 	orr.w	r2, r3, #32
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c2c:	f043 0201 	orr.w	r2, r3, #1
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	430a      	orrs	r2, r1
 8000c46:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <HAL_ADC_Init+0x1a8>)
 8000c50:	4013      	ands	r3, r2
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	6812      	ldr	r2, [r2, #0]
 8000c56:	68b9      	ldr	r1, [r7, #8]
 8000c58:	430b      	orrs	r3, r1
 8000c5a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c64:	d003      	beq.n	8000c6e <HAL_ADC_Init+0x126>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d104      	bne.n	8000c78 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	051b      	lsls	r3, r3, #20
 8000c76:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <HAL_ADC_Init+0x1ac>)
 8000c94:	4013      	ands	r3, r2
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d10b      	bne.n	8000cb4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca6:	f023 0303 	bic.w	r3, r3, #3
 8000caa:	f043 0201 	orr.w	r2, r3, #1
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cb2:	e018      	b.n	8000ce6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb8:	f023 0312 	bic.w	r3, r3, #18
 8000cbc:	f043 0210 	orr.w	r2, r3, #16
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc8:	f043 0201 	orr.w	r2, r3, #1
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cd4:	e007      	b.n	8000ce6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cda:	f043 0210 	orr.w	r2, r3, #16
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	ffe1f7fd 	.word	0xffe1f7fd
 8000cf4:	ff1f0efe 	.word	0xff1f0efe

08000cf8 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d00:	2300      	movs	r3, #0
 8000d02:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d101      	bne.n	8000d12 <HAL_ADC_Start_IT+0x1a>
 8000d0e:	2302      	movs	r3, #2
 8000d10:	e0a0      	b.n	8000e54 <HAL_ADC_Start_IT+0x15c>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2201      	movs	r2, #1
 8000d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f000 faa6 	bl	800126c <ADC_Enable>
 8000d20:	4603      	mov	r3, r0
 8000d22:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f040 808f 	bne.w	8000e4a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d34:	f023 0301 	bic.w	r3, r3, #1
 8000d38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a45      	ldr	r2, [pc, #276]	; (8000e5c <HAL_ADC_Start_IT+0x164>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d105      	bne.n	8000d56 <HAL_ADC_Start_IT+0x5e>
 8000d4a:	4b45      	ldr	r3, [pc, #276]	; (8000e60 <HAL_ADC_Start_IT+0x168>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d115      	bne.n	8000d82 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d026      	beq.n	8000dbe <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d80:	e01d      	b.n	8000dbe <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a33      	ldr	r2, [pc, #204]	; (8000e60 <HAL_ADC_Start_IT+0x168>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d004      	beq.n	8000da2 <HAL_ADC_Start_IT+0xaa>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a2f      	ldr	r2, [pc, #188]	; (8000e5c <HAL_ADC_Start_IT+0x164>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d10d      	bne.n	8000dbe <HAL_ADC_Start_IT+0xc6>
 8000da2:	4b2f      	ldr	r3, [pc, #188]	; (8000e60 <HAL_ADC_Start_IT+0x168>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d007      	beq.n	8000dbe <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000db6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d006      	beq.n	8000dd8 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dce:	f023 0206 	bic.w	r2, r3, #6
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dd6:	e002      	b.n	8000dde <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f06f 0202 	mvn.w	r2, #2
 8000dee:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f042 0220 	orr.w	r2, r2, #32
 8000dfe:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e0a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e0e:	d113      	bne.n	8000e38 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e14:	4a11      	ldr	r2, [pc, #68]	; (8000e5c <HAL_ADC_Start_IT+0x164>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d105      	bne.n	8000e26 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <HAL_ADC_Start_IT+0x168>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d108      	bne.n	8000e38 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	e00c      	b.n	8000e52 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	e003      	b.n	8000e52 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40012800 	.word	0x40012800
 8000e60:	40012400 	.word	0x40012400

08000e64 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d101      	bne.n	8000e7e <HAL_ADC_Stop_IT+0x1a>
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	e022      	b.n	8000ec4 <HAL_ADC_Stop_IT+0x60>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2201      	movs	r2, #1
 8000e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f000 fa42 	bl	8001310 <ADC_ConversionStop_Disable>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d111      	bne.n	8000eba <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 0220 	bic.w	r2, r2, #32
 8000ea4:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eaa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000eae:	f023 0301 	bic.w	r3, r3, #1
 8000eb2:	f043 0201 	orr.w	r2, r3, #1
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0320 	and.w	r3, r3, #32
 8000ef6:	2b20      	cmp	r3, #32
 8000ef8:	d140      	bne.n	8000f7c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d139      	bne.n	8000f7c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0c:	f003 0310 	and.w	r3, r3, #16
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d105      	bne.n	8000f20 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f2a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f2e:	d11d      	bne.n	8000f6c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d119      	bne.n	8000f6c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f022 0220 	bic.w	r2, r2, #32
 8000f46:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d105      	bne.n	8000f6c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f64:	f043 0201 	orr.w	r2, r3, #1
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff fb2d 	bl	80005cc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f06f 0212 	mvn.w	r2, #18
 8000f7a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f86:	2b80      	cmp	r3, #128	; 0x80
 8000f88:	d14f      	bne.n	800102a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	2b04      	cmp	r3, #4
 8000f96:	d148      	bne.n	800102a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9c:	f003 0310 	and.w	r3, r3, #16
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d105      	bne.n	8000fb0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000fba:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000fbe:	d012      	beq.n	8000fe6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d125      	bne.n	800101a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000fd8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000fdc:	d11d      	bne.n	800101a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d119      	bne.n	800101a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ff4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800100a:	2b00      	cmp	r3, #0
 800100c:	d105      	bne.n	800101a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001012:	f043 0201 	orr.w	r2, r3, #1
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 fa4e 	bl	80014bc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f06f 020c 	mvn.w	r2, #12
 8001028:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001034:	2b40      	cmp	r3, #64	; 0x40
 8001036:	d114      	bne.n	8001062 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	2b01      	cmp	r3, #1
 8001044:	d10d      	bne.n	8001062 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 f809 	bl	800106a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f06f 0201 	mvn.w	r2, #1
 8001060:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001094:	2b01      	cmp	r3, #1
 8001096:	d101      	bne.n	800109c <HAL_ADC_ConfigChannel+0x20>
 8001098:	2302      	movs	r3, #2
 800109a:	e0dc      	b.n	8001256 <HAL_ADC_ConfigChannel+0x1da>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2201      	movs	r2, #1
 80010a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b06      	cmp	r3, #6
 80010aa:	d81c      	bhi.n	80010e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	3b05      	subs	r3, #5
 80010be:	221f      	movs	r2, #31
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	4019      	ands	r1, r3
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	3b05      	subs	r3, #5
 80010d8:	fa00 f203 	lsl.w	r2, r0, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	635a      	str	r2, [r3, #52]	; 0x34
 80010e4:	e03c      	b.n	8001160 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b0c      	cmp	r3, #12
 80010ec:	d81c      	bhi.n	8001128 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	3b23      	subs	r3, #35	; 0x23
 8001100:	221f      	movs	r2, #31
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	4019      	ands	r1, r3
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	4613      	mov	r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4413      	add	r3, r2
 8001118:	3b23      	subs	r3, #35	; 0x23
 800111a:	fa00 f203 	lsl.w	r2, r0, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	430a      	orrs	r2, r1
 8001124:	631a      	str	r2, [r3, #48]	; 0x30
 8001126:	e01b      	b.n	8001160 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	3b41      	subs	r3, #65	; 0x41
 800113a:	221f      	movs	r2, #31
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	4019      	ands	r1, r3
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	6818      	ldr	r0, [r3, #0]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	3b41      	subs	r3, #65	; 0x41
 8001154:	fa00 f203 	lsl.w	r2, r0, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	430a      	orrs	r2, r1
 800115e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b09      	cmp	r3, #9
 8001166:	d91c      	bls.n	80011a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	68d9      	ldr	r1, [r3, #12]
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	4613      	mov	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4413      	add	r3, r2
 8001178:	3b1e      	subs	r3, #30
 800117a:	2207      	movs	r2, #7
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	4019      	ands	r1, r3
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	6898      	ldr	r0, [r3, #8]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4613      	mov	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4413      	add	r3, r2
 8001192:	3b1e      	subs	r3, #30
 8001194:	fa00 f203 	lsl.w	r2, r0, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	430a      	orrs	r2, r1
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	e019      	b.n	80011d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6919      	ldr	r1, [r3, #16]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4613      	mov	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	4413      	add	r3, r2
 80011b2:	2207      	movs	r2, #7
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	4019      	ands	r1, r3
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	6898      	ldr	r0, [r3, #8]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	fa00 f203 	lsl.w	r2, r0, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b10      	cmp	r3, #16
 80011dc:	d003      	beq.n	80011e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011e2:	2b11      	cmp	r3, #17
 80011e4:	d132      	bne.n	800124c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a1d      	ldr	r2, [pc, #116]	; (8001260 <HAL_ADC_ConfigChannel+0x1e4>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d125      	bne.n	800123c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d126      	bne.n	800124c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800120c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b10      	cmp	r3, #16
 8001214:	d11a      	bne.n	800124c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <HAL_ADC_ConfigChannel+0x1e8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a13      	ldr	r2, [pc, #76]	; (8001268 <HAL_ADC_ConfigChannel+0x1ec>)
 800121c:	fba2 2303 	umull	r2, r3, r2, r3
 8001220:	0c9a      	lsrs	r2, r3, #18
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800122c:	e002      	b.n	8001234 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	3b01      	subs	r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f9      	bne.n	800122e <HAL_ADC_ConfigChannel+0x1b2>
 800123a:	e007      	b.n	800124c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001240:	f043 0220 	orr.w	r2, r3, #32
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001254:	7bfb      	ldrb	r3, [r7, #15]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	40012400 	.word	0x40012400
 8001264:	20000000 	.word	0x20000000
 8001268:	431bde83 	.word	0x431bde83

0800126c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b01      	cmp	r3, #1
 8001288:	d039      	beq.n	80012fe <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f042 0201 	orr.w	r2, r2, #1
 8001298:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800129a:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <ADC_Enable+0x9c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a1b      	ldr	r2, [pc, #108]	; (800130c <ADC_Enable+0xa0>)
 80012a0:	fba2 2303 	umull	r2, r3, r2, r3
 80012a4:	0c9b      	lsrs	r3, r3, #18
 80012a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012a8:	e002      	b.n	80012b0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f9      	bne.n	80012aa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012b6:	f7ff fc1b 	bl	8000af0 <HAL_GetTick>
 80012ba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012bc:	e018      	b.n	80012f0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012be:	f7ff fc17 	bl	8000af0 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d911      	bls.n	80012f0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d0:	f043 0210 	orr.w	r2, r3, #16
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012dc:	f043 0201 	orr.w	r2, r3, #1
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e007      	b.n	8001300 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d1df      	bne.n	80012be <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000000 	.word	0x20000000
 800130c:	431bde83 	.word	0x431bde83

08001310 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b01      	cmp	r3, #1
 8001328:	d127      	bne.n	800137a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0201 	bic.w	r2, r2, #1
 8001338:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800133a:	f7ff fbd9 	bl	8000af0 <HAL_GetTick>
 800133e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001340:	e014      	b.n	800136c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001342:	f7ff fbd5 	bl	8000af0 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d90d      	bls.n	800136c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001354:	f043 0210 	orr.w	r2, r3, #16
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	f043 0201 	orr.w	r2, r3, #1
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e007      	b.n	800137c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b01      	cmp	r3, #1
 8001378:	d0e3      	beq.n	8001342 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001384:	b590      	push	{r4, r7, lr}
 8001386:	b087      	sub	sp, #28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800139a:	2b01      	cmp	r3, #1
 800139c:	d101      	bne.n	80013a2 <HAL_ADCEx_Calibration_Start+0x1e>
 800139e:	2302      	movs	r3, #2
 80013a0:	e086      	b.n	80014b0 <HAL_ADCEx_Calibration_Start+0x12c>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ffb0 	bl	8001310 <ADC_ConversionStop_Disable>
 80013b0:	4603      	mov	r3, r0
 80013b2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80013b4:	7dfb      	ldrb	r3, [r7, #23]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d175      	bne.n	80014a6 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013c2:	f023 0302 	bic.w	r3, r3, #2
 80013c6:	f043 0202 	orr.w	r2, r3, #2
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80013ce:	4b3a      	ldr	r3, [pc, #232]	; (80014b8 <HAL_ADCEx_Calibration_Start+0x134>)
 80013d0:	681c      	ldr	r4, [r3, #0]
 80013d2:	2002      	movs	r0, #2
 80013d4:	f001 fa4a 	bl	800286c <HAL_RCCEx_GetPeriphCLKFreq>
 80013d8:	4603      	mov	r3, r0
 80013da:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80013de:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80013e0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80013e2:	e002      	b.n	80013ea <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f9      	bne.n	80013e4 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff3b 	bl	800126c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f042 0208 	orr.w	r2, r2, #8
 8001404:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001406:	f7ff fb73 	bl	8000af0 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800140c:	e014      	b.n	8001438 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800140e:	f7ff fb6f 	bl	8000af0 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b0a      	cmp	r3, #10
 800141a:	d90d      	bls.n	8001438 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	f023 0312 	bic.w	r3, r3, #18
 8001424:	f043 0210 	orr.w	r2, r3, #16
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e03b      	b.n	80014b0 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1e3      	bne.n	800140e <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f042 0204 	orr.w	r2, r2, #4
 8001454:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001456:	f7ff fb4b 	bl	8000af0 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800145c:	e014      	b.n	8001488 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800145e:	f7ff fb47 	bl	8000af0 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b0a      	cmp	r3, #10
 800146a:	d90d      	bls.n	8001488 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001470:	f023 0312 	bic.w	r3, r3, #18
 8001474:	f043 0210 	orr.w	r2, r3, #16
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e013      	b.n	80014b0 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1e3      	bne.n	800145e <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149a:	f023 0303 	bic.w	r3, r3, #3
 800149e:	f043 0201 	orr.w	r2, r3, #1
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80014ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	371c      	adds	r7, #28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd90      	pop	{r4, r7, pc}
 80014b8:	20000000 	.word	0x20000000

080014bc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
	...

080014d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001502:	4a04      	ldr	r2, [pc, #16]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	60d3      	str	r3, [r2, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <__NVIC_GetPriorityGrouping+0x18>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	f003 0307 	and.w	r3, r3, #7
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	2b00      	cmp	r3, #0
 8001544:	db0b      	blt.n	800155e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	f003 021f 	and.w	r2, r3, #31
 800154c:	4906      	ldr	r1, [pc, #24]	; (8001568 <__NVIC_EnableIRQ+0x34>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	095b      	lsrs	r3, r3, #5
 8001554:	2001      	movs	r0, #1
 8001556:	fa00 f202 	lsl.w	r2, r0, r2
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	e000e100 	.word	0xe000e100

0800156c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	2b00      	cmp	r3, #0
 800157e:	db0a      	blt.n	8001596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	490c      	ldr	r1, [pc, #48]	; (80015b8 <__NVIC_SetPriority+0x4c>)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	0112      	lsls	r2, r2, #4
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	440b      	add	r3, r1
 8001590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001594:	e00a      	b.n	80015ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4908      	ldr	r1, [pc, #32]	; (80015bc <__NVIC_SetPriority+0x50>)
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	3b04      	subs	r3, #4
 80015a4:	0112      	lsls	r2, r2, #4
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	440b      	add	r3, r1
 80015aa:	761a      	strb	r2, [r3, #24]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e100 	.word	0xe000e100
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f1c3 0307 	rsb	r3, r3, #7
 80015da:	2b04      	cmp	r3, #4
 80015dc:	bf28      	it	cs
 80015de:	2304      	movcs	r3, #4
 80015e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3304      	adds	r3, #4
 80015e6:	2b06      	cmp	r3, #6
 80015e8:	d902      	bls.n	80015f0 <NVIC_EncodePriority+0x30>
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3b03      	subs	r3, #3
 80015ee:	e000      	b.n	80015f2 <NVIC_EncodePriority+0x32>
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	f04f 32ff 	mov.w	r2, #4294967295
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43da      	mvns	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	401a      	ands	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001608:	f04f 31ff 	mov.w	r1, #4294967295
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	43d9      	mvns	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	4313      	orrs	r3, r2
         );
}
 800161a:	4618      	mov	r0, r3
 800161c:	3724      	adds	r7, #36	; 0x24
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001634:	d301      	bcc.n	800163a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001636:	2301      	movs	r3, #1
 8001638:	e00f      	b.n	800165a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163a:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <SysTick_Config+0x40>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001642:	210f      	movs	r1, #15
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	f7ff ff90 	bl	800156c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <SysTick_Config+0x40>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001652:	4b04      	ldr	r3, [pc, #16]	; (8001664 <SysTick_Config+0x40>)
 8001654:	2207      	movs	r2, #7
 8001656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	e000e010 	.word	0xe000e010

08001668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff2d 	bl	80014d0 <__NVIC_SetPriorityGrouping>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001690:	f7ff ff42 	bl	8001518 <__NVIC_GetPriorityGrouping>
 8001694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	6978      	ldr	r0, [r7, #20]
 800169c:	f7ff ff90 	bl	80015c0 <NVIC_EncodePriority>
 80016a0:	4602      	mov	r2, r0
 80016a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff5f 	bl	800156c <__NVIC_SetPriority>
}
 80016ae:	bf00      	nop
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff35 	bl	8001534 <__NVIC_EnableIRQ>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ffa2 	bl	8001624 <SysTick_Config>
 80016e0:	4603      	mov	r3, r0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e043      	b.n	800178a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	4b22      	ldr	r3, [pc, #136]	; (8001794 <HAL_DMA_Init+0xa8>)
 800170a:	4413      	add	r3, r2
 800170c:	4a22      	ldr	r2, [pc, #136]	; (8001798 <HAL_DMA_Init+0xac>)
 800170e:	fba2 2303 	umull	r2, r3, r2, r3
 8001712:	091b      	lsrs	r3, r3, #4
 8001714:	009a      	lsls	r2, r3, #2
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a1f      	ldr	r2, [pc, #124]	; (800179c <HAL_DMA_Init+0xb0>)
 800171e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2202      	movs	r2, #2
 8001724:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001736:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800173a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001744:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001750:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800175c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	4313      	orrs	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	bffdfff8 	.word	0xbffdfff8
 8001798:	cccccccd 	.word	0xcccccccd
 800179c:	40020000 	.word	0x40020000

080017a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d101      	bne.n	80017c0 <HAL_DMA_Start_IT+0x20>
 80017bc:	2302      	movs	r3, #2
 80017be:	e04a      	b.n	8001856 <HAL_DMA_Start_IT+0xb6>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d13a      	bne.n	8001848 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2202      	movs	r2, #2
 80017d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0201 	bic.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f000 f9ae 	bl	8001b58 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	2b00      	cmp	r3, #0
 8001802:	d008      	beq.n	8001816 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 020e 	orr.w	r2, r2, #14
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	e00f      	b.n	8001836 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 0204 	bic.w	r2, r2, #4
 8001824:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f042 020a 	orr.w	r2, r2, #10
 8001834:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f042 0201 	orr.w	r2, r2, #1
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	e005      	b.n	8001854 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001850:	2302      	movs	r3, #2
 8001852:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001854:	7dfb      	ldrb	r3, [r7, #23]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001868:	2300      	movs	r3, #0
 800186a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001872:	2b02      	cmp	r3, #2
 8001874:	d005      	beq.n	8001882 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2204      	movs	r2, #4
 800187a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
 8001880:	e051      	b.n	8001926 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 020e 	bic.w	r2, r2, #14
 8001890:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 0201 	bic.w	r2, r2, #1
 80018a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a22      	ldr	r2, [pc, #136]	; (8001930 <HAL_DMA_Abort_IT+0xd0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d029      	beq.n	8001900 <HAL_DMA_Abort_IT+0xa0>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a20      	ldr	r2, [pc, #128]	; (8001934 <HAL_DMA_Abort_IT+0xd4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d022      	beq.n	80018fc <HAL_DMA_Abort_IT+0x9c>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a1f      	ldr	r2, [pc, #124]	; (8001938 <HAL_DMA_Abort_IT+0xd8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d01a      	beq.n	80018f6 <HAL_DMA_Abort_IT+0x96>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1d      	ldr	r2, [pc, #116]	; (800193c <HAL_DMA_Abort_IT+0xdc>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d012      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x90>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a1c      	ldr	r2, [pc, #112]	; (8001940 <HAL_DMA_Abort_IT+0xe0>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d00a      	beq.n	80018ea <HAL_DMA_Abort_IT+0x8a>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a1a      	ldr	r2, [pc, #104]	; (8001944 <HAL_DMA_Abort_IT+0xe4>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d102      	bne.n	80018e4 <HAL_DMA_Abort_IT+0x84>
 80018de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018e2:	e00e      	b.n	8001902 <HAL_DMA_Abort_IT+0xa2>
 80018e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018e8:	e00b      	b.n	8001902 <HAL_DMA_Abort_IT+0xa2>
 80018ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ee:	e008      	b.n	8001902 <HAL_DMA_Abort_IT+0xa2>
 80018f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f4:	e005      	b.n	8001902 <HAL_DMA_Abort_IT+0xa2>
 80018f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018fa:	e002      	b.n	8001902 <HAL_DMA_Abort_IT+0xa2>
 80018fc:	2310      	movs	r3, #16
 80018fe:	e000      	b.n	8001902 <HAL_DMA_Abort_IT+0xa2>
 8001900:	2301      	movs	r3, #1
 8001902:	4a11      	ldr	r2, [pc, #68]	; (8001948 <HAL_DMA_Abort_IT+0xe8>)
 8001904:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	4798      	blx	r3
    } 
  }
  return status;
 8001926:	7bfb      	ldrb	r3, [r7, #15]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40020008 	.word	0x40020008
 8001934:	4002001c 	.word	0x4002001c
 8001938:	40020030 	.word	0x40020030
 800193c:	40020044 	.word	0x40020044
 8001940:	40020058 	.word	0x40020058
 8001944:	4002006c 	.word	0x4002006c
 8001948:	40020000 	.word	0x40020000

0800194c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	2204      	movs	r2, #4
 800196a:	409a      	lsls	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d04f      	beq.n	8001a14 <HAL_DMA_IRQHandler+0xc8>
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	d04a      	beq.n	8001a14 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0320 	and.w	r3, r3, #32
 8001988:	2b00      	cmp	r3, #0
 800198a:	d107      	bne.n	800199c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0204 	bic.w	r2, r2, #4
 800199a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a66      	ldr	r2, [pc, #408]	; (8001b3c <HAL_DMA_IRQHandler+0x1f0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d029      	beq.n	80019fa <HAL_DMA_IRQHandler+0xae>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a65      	ldr	r2, [pc, #404]	; (8001b40 <HAL_DMA_IRQHandler+0x1f4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d022      	beq.n	80019f6 <HAL_DMA_IRQHandler+0xaa>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a63      	ldr	r2, [pc, #396]	; (8001b44 <HAL_DMA_IRQHandler+0x1f8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d01a      	beq.n	80019f0 <HAL_DMA_IRQHandler+0xa4>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a62      	ldr	r2, [pc, #392]	; (8001b48 <HAL_DMA_IRQHandler+0x1fc>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d012      	beq.n	80019ea <HAL_DMA_IRQHandler+0x9e>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a60      	ldr	r2, [pc, #384]	; (8001b4c <HAL_DMA_IRQHandler+0x200>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d00a      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x98>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a5f      	ldr	r2, [pc, #380]	; (8001b50 <HAL_DMA_IRQHandler+0x204>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d102      	bne.n	80019de <HAL_DMA_IRQHandler+0x92>
 80019d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019dc:	e00e      	b.n	80019fc <HAL_DMA_IRQHandler+0xb0>
 80019de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019e2:	e00b      	b.n	80019fc <HAL_DMA_IRQHandler+0xb0>
 80019e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80019e8:	e008      	b.n	80019fc <HAL_DMA_IRQHandler+0xb0>
 80019ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019ee:	e005      	b.n	80019fc <HAL_DMA_IRQHandler+0xb0>
 80019f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f4:	e002      	b.n	80019fc <HAL_DMA_IRQHandler+0xb0>
 80019f6:	2340      	movs	r3, #64	; 0x40
 80019f8:	e000      	b.n	80019fc <HAL_DMA_IRQHandler+0xb0>
 80019fa:	2304      	movs	r3, #4
 80019fc:	4a55      	ldr	r2, [pc, #340]	; (8001b54 <HAL_DMA_IRQHandler+0x208>)
 80019fe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 8094 	beq.w	8001b32 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a12:	e08e      	b.n	8001b32 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	2202      	movs	r2, #2
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d056      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x186>
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d051      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0320 	and.w	r3, r3, #32
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10b      	bne.n	8001a54 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 020a 	bic.w	r2, r2, #10
 8001a4a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a38      	ldr	r2, [pc, #224]	; (8001b3c <HAL_DMA_IRQHandler+0x1f0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d029      	beq.n	8001ab2 <HAL_DMA_IRQHandler+0x166>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a37      	ldr	r2, [pc, #220]	; (8001b40 <HAL_DMA_IRQHandler+0x1f4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d022      	beq.n	8001aae <HAL_DMA_IRQHandler+0x162>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a35      	ldr	r2, [pc, #212]	; (8001b44 <HAL_DMA_IRQHandler+0x1f8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d01a      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x15c>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a34      	ldr	r2, [pc, #208]	; (8001b48 <HAL_DMA_IRQHandler+0x1fc>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d012      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0x156>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a32      	ldr	r2, [pc, #200]	; (8001b4c <HAL_DMA_IRQHandler+0x200>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00a      	beq.n	8001a9c <HAL_DMA_IRQHandler+0x150>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a31      	ldr	r2, [pc, #196]	; (8001b50 <HAL_DMA_IRQHandler+0x204>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d102      	bne.n	8001a96 <HAL_DMA_IRQHandler+0x14a>
 8001a90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a94:	e00e      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x168>
 8001a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a9a:	e00b      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x168>
 8001a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aa0:	e008      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x168>
 8001aa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa6:	e005      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x168>
 8001aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aac:	e002      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x168>
 8001aae:	2320      	movs	r3, #32
 8001ab0:	e000      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x168>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	4a27      	ldr	r2, [pc, #156]	; (8001b54 <HAL_DMA_IRQHandler+0x208>)
 8001ab6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d034      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ad0:	e02f      	b.n	8001b32 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	2208      	movs	r2, #8
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d028      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x1e8>
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d023      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 020e 	bic.w	r2, r2, #14
 8001afa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b04:	2101      	movs	r1, #1
 8001b06:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d004      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	4798      	blx	r3
    }
  }
  return;
 8001b32:	bf00      	nop
 8001b34:	bf00      	nop
}
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40020008 	.word	0x40020008
 8001b40:	4002001c 	.word	0x4002001c
 8001b44:	40020030 	.word	0x40020030
 8001b48:	40020044 	.word	0x40020044
 8001b4c:	40020058 	.word	0x40020058
 8001b50:	4002006c 	.word	0x4002006c
 8001b54:	40020000 	.word	0x40020000

08001b58 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
 8001b64:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6e:	2101      	movs	r1, #1
 8001b70:	fa01 f202 	lsl.w	r2, r1, r2
 8001b74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b10      	cmp	r3, #16
 8001b84:	d108      	bne.n	8001b98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b96:	e007      	b.n	8001ba8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	60da      	str	r2, [r3, #12]
}
 8001ba8:	bf00      	nop
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
	...

08001bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b08b      	sub	sp, #44	; 0x2c
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc6:	e127      	b.n	8001e18 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	f040 8116 	bne.w	8001e12 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b12      	cmp	r3, #18
 8001bec:	d034      	beq.n	8001c58 <HAL_GPIO_Init+0xa4>
 8001bee:	2b12      	cmp	r3, #18
 8001bf0:	d80d      	bhi.n	8001c0e <HAL_GPIO_Init+0x5a>
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d02b      	beq.n	8001c4e <HAL_GPIO_Init+0x9a>
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d804      	bhi.n	8001c04 <HAL_GPIO_Init+0x50>
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d031      	beq.n	8001c62 <HAL_GPIO_Init+0xae>
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d01c      	beq.n	8001c3c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c02:	e048      	b.n	8001c96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d043      	beq.n	8001c90 <HAL_GPIO_Init+0xdc>
 8001c08:	2b11      	cmp	r3, #17
 8001c0a:	d01b      	beq.n	8001c44 <HAL_GPIO_Init+0x90>
          break;
 8001c0c:	e043      	b.n	8001c96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c0e:	4a89      	ldr	r2, [pc, #548]	; (8001e34 <HAL_GPIO_Init+0x280>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d026      	beq.n	8001c62 <HAL_GPIO_Init+0xae>
 8001c14:	4a87      	ldr	r2, [pc, #540]	; (8001e34 <HAL_GPIO_Init+0x280>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d806      	bhi.n	8001c28 <HAL_GPIO_Init+0x74>
 8001c1a:	4a87      	ldr	r2, [pc, #540]	; (8001e38 <HAL_GPIO_Init+0x284>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d020      	beq.n	8001c62 <HAL_GPIO_Init+0xae>
 8001c20:	4a86      	ldr	r2, [pc, #536]	; (8001e3c <HAL_GPIO_Init+0x288>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d01d      	beq.n	8001c62 <HAL_GPIO_Init+0xae>
          break;
 8001c26:	e036      	b.n	8001c96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c28:	4a85      	ldr	r2, [pc, #532]	; (8001e40 <HAL_GPIO_Init+0x28c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d019      	beq.n	8001c62 <HAL_GPIO_Init+0xae>
 8001c2e:	4a85      	ldr	r2, [pc, #532]	; (8001e44 <HAL_GPIO_Init+0x290>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d016      	beq.n	8001c62 <HAL_GPIO_Init+0xae>
 8001c34:	4a84      	ldr	r2, [pc, #528]	; (8001e48 <HAL_GPIO_Init+0x294>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d013      	beq.n	8001c62 <HAL_GPIO_Init+0xae>
          break;
 8001c3a:	e02c      	b.n	8001c96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	623b      	str	r3, [r7, #32]
          break;
 8001c42:	e028      	b.n	8001c96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	623b      	str	r3, [r7, #32]
          break;
 8001c4c:	e023      	b.n	8001c96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	3308      	adds	r3, #8
 8001c54:	623b      	str	r3, [r7, #32]
          break;
 8001c56:	e01e      	b.n	8001c96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	330c      	adds	r3, #12
 8001c5e:	623b      	str	r3, [r7, #32]
          break;
 8001c60:	e019      	b.n	8001c96 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d102      	bne.n	8001c70 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	623b      	str	r3, [r7, #32]
          break;
 8001c6e:	e012      	b.n	8001c96 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d105      	bne.n	8001c84 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c78:	2308      	movs	r3, #8
 8001c7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69fa      	ldr	r2, [r7, #28]
 8001c80:	611a      	str	r2, [r3, #16]
          break;
 8001c82:	e008      	b.n	8001c96 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c84:	2308      	movs	r3, #8
 8001c86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	615a      	str	r2, [r3, #20]
          break;
 8001c8e:	e002      	b.n	8001c96 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c90:	2300      	movs	r3, #0
 8001c92:	623b      	str	r3, [r7, #32]
          break;
 8001c94:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	2bff      	cmp	r3, #255	; 0xff
 8001c9a:	d801      	bhi.n	8001ca0 <HAL_GPIO_Init+0xec>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	e001      	b.n	8001ca4 <HAL_GPIO_Init+0xf0>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	2bff      	cmp	r3, #255	; 0xff
 8001caa:	d802      	bhi.n	8001cb2 <HAL_GPIO_Init+0xfe>
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	e002      	b.n	8001cb8 <HAL_GPIO_Init+0x104>
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	3b08      	subs	r3, #8
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	210f      	movs	r1, #15
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	401a      	ands	r2, r3
 8001cca:	6a39      	ldr	r1, [r7, #32]
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 8096 	beq.w	8001e12 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ce6:	4b59      	ldr	r3, [pc, #356]	; (8001e4c <HAL_GPIO_Init+0x298>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	4a58      	ldr	r2, [pc, #352]	; (8001e4c <HAL_GPIO_Init+0x298>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6193      	str	r3, [r2, #24]
 8001cf2:	4b56      	ldr	r3, [pc, #344]	; (8001e4c <HAL_GPIO_Init+0x298>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cfe:	4a54      	ldr	r2, [pc, #336]	; (8001e50 <HAL_GPIO_Init+0x29c>)
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	3302      	adds	r3, #2
 8001d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	220f      	movs	r2, #15
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4b      	ldr	r2, [pc, #300]	; (8001e54 <HAL_GPIO_Init+0x2a0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_GPIO_Init+0x19e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4a      	ldr	r2, [pc, #296]	; (8001e58 <HAL_GPIO_Init+0x2a4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00d      	beq.n	8001d4e <HAL_GPIO_Init+0x19a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a49      	ldr	r2, [pc, #292]	; (8001e5c <HAL_GPIO_Init+0x2a8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d007      	beq.n	8001d4a <HAL_GPIO_Init+0x196>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a48      	ldr	r2, [pc, #288]	; (8001e60 <HAL_GPIO_Init+0x2ac>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d101      	bne.n	8001d46 <HAL_GPIO_Init+0x192>
 8001d42:	2303      	movs	r3, #3
 8001d44:	e006      	b.n	8001d54 <HAL_GPIO_Init+0x1a0>
 8001d46:	2304      	movs	r3, #4
 8001d48:	e004      	b.n	8001d54 <HAL_GPIO_Init+0x1a0>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e002      	b.n	8001d54 <HAL_GPIO_Init+0x1a0>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_GPIO_Init+0x1a0>
 8001d52:	2300      	movs	r3, #0
 8001d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d56:	f002 0203 	and.w	r2, r2, #3
 8001d5a:	0092      	lsls	r2, r2, #2
 8001d5c:	4093      	lsls	r3, r2
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d64:	493a      	ldr	r1, [pc, #232]	; (8001e50 <HAL_GPIO_Init+0x29c>)
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	089b      	lsrs	r3, r3, #2
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d006      	beq.n	8001d8c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d7e:	4b39      	ldr	r3, [pc, #228]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	4938      	ldr	r1, [pc, #224]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]
 8001d8a:	e006      	b.n	8001d9a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d8c:	4b35      	ldr	r3, [pc, #212]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	4933      	ldr	r1, [pc, #204]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d006      	beq.n	8001db4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001da6:	4b2f      	ldr	r3, [pc, #188]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	492e      	ldr	r1, [pc, #184]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	604b      	str	r3, [r1, #4]
 8001db2:	e006      	b.n	8001dc2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001db4:	4b2b      	ldr	r3, [pc, #172]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	4929      	ldr	r1, [pc, #164]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d006      	beq.n	8001ddc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dce:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	4924      	ldr	r1, [pc, #144]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	608b      	str	r3, [r1, #8]
 8001dda:	e006      	b.n	8001dea <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ddc:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	491f      	ldr	r1, [pc, #124]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d006      	beq.n	8001e04 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001df6:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	491a      	ldr	r1, [pc, #104]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	60cb      	str	r3, [r1, #12]
 8001e02:	e006      	b.n	8001e12 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	4915      	ldr	r1, [pc, #84]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	3301      	adds	r3, #1
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f47f aed0 	bne.w	8001bc8 <HAL_GPIO_Init+0x14>
  }
}
 8001e28:	bf00      	nop
 8001e2a:	372c      	adds	r7, #44	; 0x2c
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	10210000 	.word	0x10210000
 8001e38:	10110000 	.word	0x10110000
 8001e3c:	10120000 	.word	0x10120000
 8001e40:	10310000 	.word	0x10310000
 8001e44:	10320000 	.word	0x10320000
 8001e48:	10220000 	.word	0x10220000
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40010000 	.word	0x40010000
 8001e54:	40010800 	.word	0x40010800
 8001e58:	40010c00 	.word	0x40010c00
 8001e5c:	40011000 	.word	0x40011000
 8001e60:	40011400 	.word	0x40011400
 8001e64:	40010400 	.word	0x40010400

08001e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
 8001e74:	4613      	mov	r3, r2
 8001e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e78:	787b      	ldrb	r3, [r7, #1]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e7e:	887a      	ldrh	r2, [r7, #2]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e84:	e003      	b.n	8001e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	041a      	lsls	r2, r3, #16
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	611a      	str	r2, [r3, #16]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	887b      	ldrh	r3, [r7, #2]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eb0:	887a      	ldrh	r2, [r7, #2]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001eb6:	e002      	b.n	8001ebe <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eb8:	887a      	ldrh	r2, [r7, #2]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	611a      	str	r2, [r3, #16]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e26c      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 8087 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee8:	4b92      	ldr	r3, [pc, #584]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d00c      	beq.n	8001f0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ef4:	4b8f      	ldr	r3, [pc, #572]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 030c 	and.w	r3, r3, #12
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d112      	bne.n	8001f26 <HAL_RCC_OscConfig+0x5e>
 8001f00:	4b8c      	ldr	r3, [pc, #560]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0c:	d10b      	bne.n	8001f26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0e:	4b89      	ldr	r3, [pc, #548]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d06c      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x12c>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d168      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e246      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCC_OscConfig+0x76>
 8001f30:	4b80      	ldr	r3, [pc, #512]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a7f      	ldr	r2, [pc, #508]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	e02e      	b.n	8001f9c <HAL_RCC_OscConfig+0xd4>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x98>
 8001f46:	4b7b      	ldr	r3, [pc, #492]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a7a      	ldr	r2, [pc, #488]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	4b78      	ldr	r3, [pc, #480]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a77      	ldr	r2, [pc, #476]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	e01d      	b.n	8001f9c <HAL_RCC_OscConfig+0xd4>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f68:	d10c      	bne.n	8001f84 <HAL_RCC_OscConfig+0xbc>
 8001f6a:	4b72      	ldr	r3, [pc, #456]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a71      	ldr	r2, [pc, #452]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	4b6f      	ldr	r3, [pc, #444]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a6e      	ldr	r2, [pc, #440]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	e00b      	b.n	8001f9c <HAL_RCC_OscConfig+0xd4>
 8001f84:	4b6b      	ldr	r3, [pc, #428]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a6a      	ldr	r2, [pc, #424]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	4b68      	ldr	r3, [pc, #416]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a67      	ldr	r2, [pc, #412]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d013      	beq.n	8001fcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7fe fda4 	bl	8000af0 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fac:	f7fe fda0 	bl	8000af0 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	; 0x64
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e1fa      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	4b5d      	ldr	r3, [pc, #372]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0xe4>
 8001fca:	e014      	b.n	8001ff6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7fe fd90 	bl	8000af0 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd4:	f7fe fd8c 	bl	8000af0 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b64      	cmp	r3, #100	; 0x64
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e1e6      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	4b53      	ldr	r3, [pc, #332]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x10c>
 8001ff2:	e000      	b.n	8001ff6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d063      	beq.n	80020ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002002:	4b4c      	ldr	r3, [pc, #304]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00b      	beq.n	8002026 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800200e:	4b49      	ldr	r3, [pc, #292]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b08      	cmp	r3, #8
 8002018:	d11c      	bne.n	8002054 <HAL_RCC_OscConfig+0x18c>
 800201a:	4b46      	ldr	r3, [pc, #280]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d116      	bne.n	8002054 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002026:	4b43      	ldr	r3, [pc, #268]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d005      	beq.n	800203e <HAL_RCC_OscConfig+0x176>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d001      	beq.n	800203e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e1ba      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203e:	4b3d      	ldr	r3, [pc, #244]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4939      	ldr	r1, [pc, #228]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002052:	e03a      	b.n	80020ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d020      	beq.n	800209e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800205c:	4b36      	ldr	r3, [pc, #216]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 800205e:	2201      	movs	r2, #1
 8002060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002062:	f7fe fd45 	bl	8000af0 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800206a:	f7fe fd41 	bl	8000af0 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e19b      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207c:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002088:	4b2a      	ldr	r3, [pc, #168]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4927      	ldr	r1, [pc, #156]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]
 800209c:	e015      	b.n	80020ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800209e:	4b26      	ldr	r3, [pc, #152]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7fe fd24 	bl	8000af0 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ac:	f7fe fd20 	bl	8000af0 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e17a      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020be:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d03a      	beq.n	800214c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d019      	beq.n	8002112 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020de:	4b17      	ldr	r3, [pc, #92]	; (800213c <HAL_RCC_OscConfig+0x274>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e4:	f7fe fd04 	bl	8000af0 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ec:	f7fe fd00 	bl	8000af0 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e15a      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fe:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <HAL_RCC_OscConfig+0x26c>)
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800210a:	2001      	movs	r0, #1
 800210c:	f000 fada 	bl	80026c4 <RCC_Delay>
 8002110:	e01c      	b.n	800214c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_RCC_OscConfig+0x274>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002118:	f7fe fcea 	bl	8000af0 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800211e:	e00f      	b.n	8002140 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002120:	f7fe fce6 	bl	8000af0 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d908      	bls.n	8002140 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e140      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	42420000 	.word	0x42420000
 800213c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002140:	4b9e      	ldr	r3, [pc, #632]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1e9      	bne.n	8002120 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 80a6 	beq.w	80022a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800215a:	2300      	movs	r3, #0
 800215c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800215e:	4b97      	ldr	r3, [pc, #604]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10d      	bne.n	8002186 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	4b94      	ldr	r3, [pc, #592]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	4a93      	ldr	r2, [pc, #588]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002174:	61d3      	str	r3, [r2, #28]
 8002176:	4b91      	ldr	r3, [pc, #580]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002182:	2301      	movs	r3, #1
 8002184:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002186:	4b8e      	ldr	r3, [pc, #568]	; (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218e:	2b00      	cmp	r3, #0
 8002190:	d118      	bne.n	80021c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002192:	4b8b      	ldr	r3, [pc, #556]	; (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a8a      	ldr	r2, [pc, #552]	; (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 8002198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800219e:	f7fe fca7 	bl	8000af0 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a6:	f7fe fca3 	bl	8000af0 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b64      	cmp	r3, #100	; 0x64
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e0fd      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b8:	4b81      	ldr	r3, [pc, #516]	; (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d106      	bne.n	80021da <HAL_RCC_OscConfig+0x312>
 80021cc:	4b7b      	ldr	r3, [pc, #492]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	4a7a      	ldr	r2, [pc, #488]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6213      	str	r3, [r2, #32]
 80021d8:	e02d      	b.n	8002236 <HAL_RCC_OscConfig+0x36e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10c      	bne.n	80021fc <HAL_RCC_OscConfig+0x334>
 80021e2:	4b76      	ldr	r3, [pc, #472]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	4a75      	ldr	r2, [pc, #468]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	6213      	str	r3, [r2, #32]
 80021ee:	4b73      	ldr	r3, [pc, #460]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	4a72      	ldr	r2, [pc, #456]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 80021f4:	f023 0304 	bic.w	r3, r3, #4
 80021f8:	6213      	str	r3, [r2, #32]
 80021fa:	e01c      	b.n	8002236 <HAL_RCC_OscConfig+0x36e>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2b05      	cmp	r3, #5
 8002202:	d10c      	bne.n	800221e <HAL_RCC_OscConfig+0x356>
 8002204:	4b6d      	ldr	r3, [pc, #436]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4a6c      	ldr	r2, [pc, #432]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 800220a:	f043 0304 	orr.w	r3, r3, #4
 800220e:	6213      	str	r3, [r2, #32]
 8002210:	4b6a      	ldr	r3, [pc, #424]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	4a69      	ldr	r2, [pc, #420]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6213      	str	r3, [r2, #32]
 800221c:	e00b      	b.n	8002236 <HAL_RCC_OscConfig+0x36e>
 800221e:	4b67      	ldr	r3, [pc, #412]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	4a66      	ldr	r2, [pc, #408]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	6213      	str	r3, [r2, #32]
 800222a:	4b64      	ldr	r3, [pc, #400]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	4a63      	ldr	r2, [pc, #396]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002230:	f023 0304 	bic.w	r3, r3, #4
 8002234:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d015      	beq.n	800226a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223e:	f7fe fc57 	bl	8000af0 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002244:	e00a      	b.n	800225c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002246:	f7fe fc53 	bl	8000af0 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	f241 3288 	movw	r2, #5000	; 0x1388
 8002254:	4293      	cmp	r3, r2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e0ab      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225c:	4b57      	ldr	r3, [pc, #348]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0ee      	beq.n	8002246 <HAL_RCC_OscConfig+0x37e>
 8002268:	e014      	b.n	8002294 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226a:	f7fe fc41 	bl	8000af0 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7fe fc3d 	bl	8000af0 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002280:	4293      	cmp	r3, r2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e095      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002288:	4b4c      	ldr	r3, [pc, #304]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1ee      	bne.n	8002272 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002294:	7dfb      	ldrb	r3, [r7, #23]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d105      	bne.n	80022a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229a:	4b48      	ldr	r3, [pc, #288]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	4a47      	ldr	r2, [pc, #284]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 80022a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 8081 	beq.w	80023b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022b0:	4b42      	ldr	r3, [pc, #264]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 030c 	and.w	r3, r3, #12
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d061      	beq.n	8002380 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d146      	bne.n	8002352 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c4:	4b3f      	ldr	r3, [pc, #252]	; (80023c4 <HAL_RCC_OscConfig+0x4fc>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ca:	f7fe fc11 	bl	8000af0 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d2:	f7fe fc0d 	bl	8000af0 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e067      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e4:	4b35      	ldr	r3, [pc, #212]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f0      	bne.n	80022d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f8:	d108      	bne.n	800230c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022fa:	4b30      	ldr	r3, [pc, #192]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	492d      	ldr	r1, [pc, #180]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800230c:	4b2b      	ldr	r3, [pc, #172]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a19      	ldr	r1, [r3, #32]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	430b      	orrs	r3, r1
 800231e:	4927      	ldr	r1, [pc, #156]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002324:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <HAL_RCC_OscConfig+0x4fc>)
 8002326:	2201      	movs	r2, #1
 8002328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7fe fbe1 	bl	8000af0 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002332:	f7fe fbdd 	bl	8000af0 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e037      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002344:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0x46a>
 8002350:	e02f      	b.n	80023b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002352:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <HAL_RCC_OscConfig+0x4fc>)
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7fe fbca 	bl	8000af0 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002360:	f7fe fbc6 	bl	8000af0 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e020      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002372:	4b12      	ldr	r3, [pc, #72]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x498>
 800237e:	e018      	b.n	80023b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e013      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_RCC_OscConfig+0x4f4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	429a      	cmp	r2, r3
 800239e:	d106      	bne.n	80023ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d001      	beq.n	80023b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000
 80023c0:	40007000 	.word	0x40007000
 80023c4:	42420060 	.word	0x42420060

080023c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0d0      	b.n	800257e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023dc:	4b6a      	ldr	r3, [pc, #424]	; (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d910      	bls.n	800240c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b67      	ldr	r3, [pc, #412]	; (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 0207 	bic.w	r2, r3, #7
 80023f2:	4965      	ldr	r1, [pc, #404]	; (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fa:	4b63      	ldr	r3, [pc, #396]	; (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0b8      	b.n	800257e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d020      	beq.n	800245a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002424:	4b59      	ldr	r3, [pc, #356]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	4a58      	ldr	r2, [pc, #352]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800242e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800243c:	4b53      	ldr	r3, [pc, #332]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4a52      	ldr	r2, [pc, #328]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002446:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002448:	4b50      	ldr	r3, [pc, #320]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	494d      	ldr	r1, [pc, #308]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d040      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d107      	bne.n	800247e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246e:	4b47      	ldr	r3, [pc, #284]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d115      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e07f      	b.n	800257e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d107      	bne.n	8002496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002486:	4b41      	ldr	r3, [pc, #260]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d109      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e073      	b.n	800257e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002496:	4b3d      	ldr	r3, [pc, #244]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e06b      	b.n	800257e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024a6:	4b39      	ldr	r3, [pc, #228]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f023 0203 	bic.w	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4936      	ldr	r1, [pc, #216]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b8:	f7fe fb1a 	bl	8000af0 <HAL_GetTick>
 80024bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024be:	e00a      	b.n	80024d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c0:	f7fe fb16 	bl	8000af0 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e053      	b.n	800257e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d6:	4b2d      	ldr	r3, [pc, #180]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 020c 	and.w	r2, r3, #12
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d1eb      	bne.n	80024c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024e8:	4b27      	ldr	r3, [pc, #156]	; (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d210      	bcs.n	8002518 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f6:	4b24      	ldr	r3, [pc, #144]	; (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 0207 	bic.w	r2, r3, #7
 80024fe:	4922      	ldr	r1, [pc, #136]	; (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	4313      	orrs	r3, r2
 8002504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002506:	4b20      	ldr	r3, [pc, #128]	; (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e032      	b.n	800257e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4916      	ldr	r1, [pc, #88]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d009      	beq.n	8002556 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002542:	4b12      	ldr	r3, [pc, #72]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	490e      	ldr	r1, [pc, #56]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	4313      	orrs	r3, r2
 8002554:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002556:	f000 f821 	bl	800259c <HAL_RCC_GetSysClockFreq>
 800255a:	4601      	mov	r1, r0
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 8002568:	5cd3      	ldrb	r3, [r2, r3]
 800256a:	fa21 f303 	lsr.w	r3, r1, r3
 800256e:	4a09      	ldr	r2, [pc, #36]	; (8002594 <HAL_RCC_ClockConfig+0x1cc>)
 8002570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_RCC_ClockConfig+0x1d0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe fa78 	bl	8000a6c <HAL_InitTick>

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40022000 	.word	0x40022000
 800258c:	40021000 	.word	0x40021000
 8002590:	08003a70 	.word	0x08003a70
 8002594:	20000000 	.word	0x20000000
 8002598:	20000004 	.word	0x20000004

0800259c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800259c:	b490      	push	{r4, r7}
 800259e:	b08a      	sub	sp, #40	; 0x28
 80025a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025a2:	4b2a      	ldr	r3, [pc, #168]	; (800264c <HAL_RCC_GetSysClockFreq+0xb0>)
 80025a4:	1d3c      	adds	r4, r7, #4
 80025a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025ac:	4b28      	ldr	r3, [pc, #160]	; (8002650 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025ae:	881b      	ldrh	r3, [r3, #0]
 80025b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	2300      	movs	r3, #0
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	2300      	movs	r3, #0
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025c6:	4b23      	ldr	r3, [pc, #140]	; (8002654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d002      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x40>
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d003      	beq.n	80025e2 <HAL_RCC_GetSysClockFreq+0x46>
 80025da:	e02d      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025dc:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025de:	623b      	str	r3, [r7, #32]
      break;
 80025e0:	e02d      	b.n	800263e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	0c9b      	lsrs	r3, r3, #18
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025ee:	4413      	add	r3, r2
 80025f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d013      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002600:	4b14      	ldr	r3, [pc, #80]	; (8002654 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	0c5b      	lsrs	r3, r3, #17
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800260e:	4413      	add	r3, r2
 8002610:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002614:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	4a0f      	ldr	r2, [pc, #60]	; (8002658 <HAL_RCC_GetSysClockFreq+0xbc>)
 800261a:	fb02 f203 	mul.w	r2, r2, r3
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	fbb2 f3f3 	udiv	r3, r2, r3
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
 8002626:	e004      	b.n	8002632 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	4a0c      	ldr	r2, [pc, #48]	; (800265c <HAL_RCC_GetSysClockFreq+0xc0>)
 800262c:	fb02 f303 	mul.w	r3, r2, r3
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	623b      	str	r3, [r7, #32]
      break;
 8002636:	e002      	b.n	800263e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002638:	4b07      	ldr	r3, [pc, #28]	; (8002658 <HAL_RCC_GetSysClockFreq+0xbc>)
 800263a:	623b      	str	r3, [r7, #32]
      break;
 800263c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800263e:	6a3b      	ldr	r3, [r7, #32]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3728      	adds	r7, #40	; 0x28
 8002644:	46bd      	mov	sp, r7
 8002646:	bc90      	pop	{r4, r7}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	08003a48 	.word	0x08003a48
 8002650:	08003a58 	.word	0x08003a58
 8002654:	40021000 	.word	0x40021000
 8002658:	007a1200 	.word	0x007a1200
 800265c:	003d0900 	.word	0x003d0900

08002660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002664:	4b02      	ldr	r3, [pc, #8]	; (8002670 <HAL_RCC_GetHCLKFreq+0x10>)
 8002666:	681b      	ldr	r3, [r3, #0]
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	20000000 	.word	0x20000000

08002674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002678:	f7ff fff2 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 800267c:	4601      	mov	r1, r0
 800267e:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	0a1b      	lsrs	r3, r3, #8
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	4a03      	ldr	r2, [pc, #12]	; (8002698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800268a:	5cd3      	ldrb	r3, [r2, r3]
 800268c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002690:	4618      	mov	r0, r3
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40021000 	.word	0x40021000
 8002698:	08003a80 	.word	0x08003a80

0800269c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026a0:	f7ff ffde 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 80026a4:	4601      	mov	r1, r0
 80026a6:	4b05      	ldr	r3, [pc, #20]	; (80026bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	0adb      	lsrs	r3, r3, #11
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	4a03      	ldr	r2, [pc, #12]	; (80026c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026b2:	5cd3      	ldrb	r3, [r2, r3]
 80026b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000
 80026c0:	08003a80 	.word	0x08003a80

080026c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026cc:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <RCC_Delay+0x34>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <RCC_Delay+0x38>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	0a5b      	lsrs	r3, r3, #9
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	fb02 f303 	mul.w	r3, r2, r3
 80026de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026e0:	bf00      	nop
  }
  while (Delay --);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1e5a      	subs	r2, r3, #1
 80026e6:	60fa      	str	r2, [r7, #12]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f9      	bne.n	80026e0 <RCC_Delay+0x1c>
}
 80026ec:	bf00      	nop
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20000000 	.word	0x20000000
 80026fc:	10624dd3 	.word	0x10624dd3

08002700 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d07d      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800271c:	2300      	movs	r3, #0
 800271e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002720:	4b4f      	ldr	r3, [pc, #316]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10d      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800272c:	4b4c      	ldr	r3, [pc, #304]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	4a4b      	ldr	r2, [pc, #300]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002736:	61d3      	str	r3, [r2, #28]
 8002738:	4b49      	ldr	r3, [pc, #292]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002744:	2301      	movs	r3, #1
 8002746:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002748:	4b46      	ldr	r3, [pc, #280]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d118      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002754:	4b43      	ldr	r3, [pc, #268]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a42      	ldr	r2, [pc, #264]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800275a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002760:	f7fe f9c6 	bl	8000af0 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002766:	e008      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002768:	f7fe f9c2 	bl	8000af0 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e06d      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277a:	4b3a      	ldr	r3, [pc, #232]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002786:	4b36      	ldr	r3, [pc, #216]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800278e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d02e      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d027      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027a4:	4b2e      	ldr	r3, [pc, #184]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027ae:	4b2e      	ldr	r3, [pc, #184]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027b4:	4b2c      	ldr	r3, [pc, #176]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027ba:	4a29      	ldr	r2, [pc, #164]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d014      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ca:	f7fe f991 	bl	8000af0 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d0:	e00a      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d2:	f7fe f98d 	bl	8000af0 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e036      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0ee      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027f4:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4917      	ldr	r1, [pc, #92]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002802:	4313      	orrs	r3, r2
 8002804:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002806:	7dfb      	ldrb	r3, [r7, #23]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d105      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280c:	4b14      	ldr	r3, [pc, #80]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	4a13      	ldr	r2, [pc, #76]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002816:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002824:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	490b      	ldr	r1, [pc, #44]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002832:	4313      	orrs	r3, r2
 8002834:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0310 	and.w	r3, r3, #16
 800283e:	2b00      	cmp	r3, #0
 8002840:	d008      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002842:	4b07      	ldr	r3, [pc, #28]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	4904      	ldr	r1, [pc, #16]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	40007000 	.word	0x40007000
 8002868:	42420440 	.word	0x42420440

0800286c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800286c:	b590      	push	{r4, r7, lr}
 800286e:	b08d      	sub	sp, #52	; 0x34
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002874:	4b55      	ldr	r3, [pc, #340]	; (80029cc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002876:	f107 040c 	add.w	r4, r7, #12
 800287a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800287c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002880:	4b53      	ldr	r3, [pc, #332]	; (80029d0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002886:	2300      	movs	r3, #0
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
 800288a:	2300      	movs	r3, #0
 800288c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800288e:	2300      	movs	r3, #0
 8002890:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
 8002896:	2300      	movs	r3, #0
 8002898:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b02      	cmp	r3, #2
 800289e:	d07f      	beq.n	80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80028a0:	2b10      	cmp	r3, #16
 80028a2:	d002      	beq.n	80028aa <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d048      	beq.n	800293a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80028a8:	e08b      	b.n	80029c2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80028aa:	4b4a      	ldr	r3, [pc, #296]	; (80029d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80028b0:	4b48      	ldr	r3, [pc, #288]	; (80029d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d07f      	beq.n	80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	0c9b      	lsrs	r3, r3, #18
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80028c8:	4413      	add	r3, r2
 80028ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028ce:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d018      	beq.n	800290c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028da:	4b3e      	ldr	r3, [pc, #248]	; (80029d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	0c5b      	lsrs	r3, r3, #17
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80028e8:	4413      	add	r3, r2
 80028ea:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00d      	beq.n	8002916 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80028fa:	4a37      	ldr	r2, [pc, #220]	; (80029d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	fb02 f303 	mul.w	r3, r2, r3
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800290a:	e004      	b.n	8002916 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	4a33      	ldr	r2, [pc, #204]	; (80029dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002910:	fb02 f303 	mul.w	r3, r2, r3
 8002914:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002916:	4b2f      	ldr	r3, [pc, #188]	; (80029d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800291e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002922:	d102      	bne.n	800292a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002928:	e048      	b.n	80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800292a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	4a2c      	ldr	r2, [pc, #176]	; (80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	085b      	lsrs	r3, r3, #1
 8002936:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002938:	e040      	b.n	80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800293a:	4b26      	ldr	r3, [pc, #152]	; (80029d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800294a:	d108      	bne.n	800295e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28
 800295c:	e01f      	b.n	800299e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002968:	d109      	bne.n	800297e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800296a:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002976:	f649 4340 	movw	r3, #40000	; 0x9c40
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
 800297c:	e00f      	b.n	800299e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002984:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002988:	d11a      	bne.n	80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800298a:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d014      	beq.n	80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002996:	f24f 4324 	movw	r3, #62500	; 0xf424
 800299a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800299c:	e010      	b.n	80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800299e:	e00f      	b.n	80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80029a0:	f7ff fe7c 	bl	800269c <HAL_RCC_GetPCLK2Freq>
 80029a4:	4602      	mov	r2, r0
 80029a6:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	0b9b      	lsrs	r3, r3, #14
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	3301      	adds	r3, #1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80029ba:	e002      	b.n	80029c2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80029bc:	bf00      	nop
 80029be:	e000      	b.n	80029c2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80029c0:	bf00      	nop
    }
  }
  return (frequency);
 80029c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3734      	adds	r7, #52	; 0x34
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd90      	pop	{r4, r7, pc}
 80029cc:	08003a5c 	.word	0x08003a5c
 80029d0:	08003a6c 	.word	0x08003a6c
 80029d4:	40021000 	.word	0x40021000
 80029d8:	007a1200 	.word	0x007a1200
 80029dc:	003d0900 	.word	0x003d0900
 80029e0:	aaaaaaab 	.word	0xaaaaaaab

080029e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e01d      	b.n	8002a32 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fd fedc 	bl	80007c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	4619      	mov	r1, r3
 8002a22:	4610      	mov	r0, r2
 8002a24:	f000 f90e 	bl	8002c44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b085      	sub	sp, #20
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2202      	movs	r2, #2
 8002a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2b06      	cmp	r3, #6
 8002a5a:	d007      	beq.n	8002a6c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6a1a      	ldr	r2, [r3, #32]
 8002a96:	f241 1311 	movw	r3, #4369	; 0x1111
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10f      	bne.n	8002ac0 <HAL_TIM_Base_Stop+0x40>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6a1a      	ldr	r2, [r3, #32]
 8002aa6:	f240 4344 	movw	r3, #1092	; 0x444
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d107      	bne.n	8002ac0 <HAL_TIM_Base_Stop+0x40>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0201 	bic.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_TIM_ConfigClockSource+0x18>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e0a6      	b.n	8002c3a <HAL_TIM_ConfigClockSource+0x166>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b40      	cmp	r3, #64	; 0x40
 8002b22:	d067      	beq.n	8002bf4 <HAL_TIM_ConfigClockSource+0x120>
 8002b24:	2b40      	cmp	r3, #64	; 0x40
 8002b26:	d80b      	bhi.n	8002b40 <HAL_TIM_ConfigClockSource+0x6c>
 8002b28:	2b10      	cmp	r3, #16
 8002b2a:	d073      	beq.n	8002c14 <HAL_TIM_ConfigClockSource+0x140>
 8002b2c:	2b10      	cmp	r3, #16
 8002b2e:	d802      	bhi.n	8002b36 <HAL_TIM_ConfigClockSource+0x62>
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d06f      	beq.n	8002c14 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002b34:	e078      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	d06c      	beq.n	8002c14 <HAL_TIM_ConfigClockSource+0x140>
 8002b3a:	2b30      	cmp	r3, #48	; 0x30
 8002b3c:	d06a      	beq.n	8002c14 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002b3e:	e073      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b40:	2b70      	cmp	r3, #112	; 0x70
 8002b42:	d00d      	beq.n	8002b60 <HAL_TIM_ConfigClockSource+0x8c>
 8002b44:	2b70      	cmp	r3, #112	; 0x70
 8002b46:	d804      	bhi.n	8002b52 <HAL_TIM_ConfigClockSource+0x7e>
 8002b48:	2b50      	cmp	r3, #80	; 0x50
 8002b4a:	d033      	beq.n	8002bb4 <HAL_TIM_ConfigClockSource+0xe0>
 8002b4c:	2b60      	cmp	r3, #96	; 0x60
 8002b4e:	d041      	beq.n	8002bd4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002b50:	e06a      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b56:	d066      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x152>
 8002b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b5c:	d017      	beq.n	8002b8e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002b5e:	e063      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	6899      	ldr	r1, [r3, #8]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f000 f941 	bl	8002df6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b82:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	609a      	str	r2, [r3, #8]
      break;
 8002b8c:	e04c      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6899      	ldr	r1, [r3, #8]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f000 f92a 	bl	8002df6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bb0:	609a      	str	r2, [r3, #8]
      break;
 8002bb2:	e039      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	6859      	ldr	r1, [r3, #4]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	f000 f8a1 	bl	8002d08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2150      	movs	r1, #80	; 0x50
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 f8f8 	bl	8002dc2 <TIM_ITRx_SetConfig>
      break;
 8002bd2:	e029      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	461a      	mov	r2, r3
 8002be2:	f000 f8bf 	bl	8002d64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2160      	movs	r1, #96	; 0x60
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 f8e8 	bl	8002dc2 <TIM_ITRx_SetConfig>
      break;
 8002bf2:	e019      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	6859      	ldr	r1, [r3, #4]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	461a      	mov	r2, r3
 8002c02:	f000 f881 	bl	8002d08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2140      	movs	r1, #64	; 0x40
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 f8d8 	bl	8002dc2 <TIM_ITRx_SetConfig>
      break;
 8002c12:	e009      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4610      	mov	r0, r2
 8002c20:	f000 f8cf 	bl	8002dc2 <TIM_ITRx_SetConfig>
      break;
 8002c24:	e000      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002c26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a29      	ldr	r2, [pc, #164]	; (8002cfc <TIM_Base_SetConfig+0xb8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d00b      	beq.n	8002c74 <TIM_Base_SetConfig+0x30>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c62:	d007      	beq.n	8002c74 <TIM_Base_SetConfig+0x30>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a26      	ldr	r2, [pc, #152]	; (8002d00 <TIM_Base_SetConfig+0xbc>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d003      	beq.n	8002c74 <TIM_Base_SetConfig+0x30>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a25      	ldr	r2, [pc, #148]	; (8002d04 <TIM_Base_SetConfig+0xc0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d108      	bne.n	8002c86 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a1c      	ldr	r2, [pc, #112]	; (8002cfc <TIM_Base_SetConfig+0xb8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00b      	beq.n	8002ca6 <TIM_Base_SetConfig+0x62>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c94:	d007      	beq.n	8002ca6 <TIM_Base_SetConfig+0x62>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a19      	ldr	r2, [pc, #100]	; (8002d00 <TIM_Base_SetConfig+0xbc>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d003      	beq.n	8002ca6 <TIM_Base_SetConfig+0x62>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a18      	ldr	r2, [pc, #96]	; (8002d04 <TIM_Base_SetConfig+0xc0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d108      	bne.n	8002cb8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a07      	ldr	r2, [pc, #28]	; (8002cfc <TIM_Base_SetConfig+0xb8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d103      	bne.n	8002cec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	615a      	str	r2, [r3, #20]
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	40012c00 	.word	0x40012c00
 8002d00:	40000400 	.word	0x40000400
 8002d04:	40000800 	.word	0x40000800

08002d08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	f023 0201 	bic.w	r2, r3, #1
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f023 030a 	bic.w	r3, r3, #10
 8002d44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	621a      	str	r2, [r3, #32]
}
 8002d5a:	bf00      	nop
 8002d5c:	371c      	adds	r7, #28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	f023 0210 	bic.w	r2, r3, #16
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	031b      	lsls	r3, r3, #12
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002da0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	621a      	str	r2, [r3, #32]
}
 8002db8:	bf00      	nop
 8002dba:	371c      	adds	r7, #28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr

08002dc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b085      	sub	sp, #20
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f043 0307 	orr.w	r3, r3, #7
 8002de4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	609a      	str	r2, [r3, #8]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr

08002df6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b087      	sub	sp, #28
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
 8002e02:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e10:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	021a      	lsls	r2, r3, #8
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	609a      	str	r2, [r3, #8]
}
 8002e2a:	bf00      	nop
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e032      	b.n	8002eb2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e84:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e03f      	b.n	8002f4e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fd fc8e 	bl	8000804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2224      	movs	r2, #36	; 0x24
 8002eec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002efe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 fc8f 	bl	8003824 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695a      	ldr	r2, [r3, #20]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b088      	sub	sp, #32
 8002f5a:	af02      	add	r7, sp, #8
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	603b      	str	r3, [r7, #0]
 8002f62:	4613      	mov	r3, r2
 8002f64:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	f040 8083 	bne.w	800307e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <HAL_UART_Transmit+0x2e>
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e07b      	b.n	8003080 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_UART_Transmit+0x40>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e074      	b.n	8003080 <HAL_UART_Transmit+0x12a>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2221      	movs	r2, #33	; 0x21
 8002fa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002fac:	f7fd fda0 	bl	8000af0 <HAL_GetTick>
 8002fb0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	88fa      	ldrh	r2, [r7, #6]
 8002fb6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	88fa      	ldrh	r2, [r7, #6]
 8002fbc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fbe:	e042      	b.n	8003046 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd6:	d122      	bne.n	800301e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2180      	movs	r1, #128	; 0x80
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 fa9f 	bl	8003526 <UART_WaitOnFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e046      	b.n	8003080 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003004:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d103      	bne.n	8003016 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	3302      	adds	r3, #2
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	e017      	b.n	8003046 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	3301      	adds	r3, #1
 800301a:	60bb      	str	r3, [r7, #8]
 800301c:	e013      	b.n	8003046 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2200      	movs	r2, #0
 8003026:	2180      	movs	r1, #128	; 0x80
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 fa7c 	bl	8003526 <UART_WaitOnFlagUntilTimeout>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e023      	b.n	8003080 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	60ba      	str	r2, [r7, #8]
 800303e:	781a      	ldrb	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1b7      	bne.n	8002fc0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2200      	movs	r2, #0
 8003058:	2140      	movs	r1, #64	; 0x40
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 fa63 	bl	8003526 <UART_WaitOnFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e00a      	b.n	8003080 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	e000      	b.n	8003080 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800307e:	2302      	movs	r3, #2
  }
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	4613      	mov	r3, r2
 8003094:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b20      	cmp	r3, #32
 80030a0:	d140      	bne.n	8003124 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <HAL_UART_Receive_IT+0x26>
 80030a8:	88fb      	ldrh	r3, [r7, #6]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e039      	b.n	8003126 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_UART_Receive_IT+0x38>
 80030bc:	2302      	movs	r3, #2
 80030be:	e032      	b.n	8003126 <HAL_UART_Receive_IT+0x9e>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	88fa      	ldrh	r2, [r7, #6]
 80030d2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	88fa      	ldrh	r2, [r7, #6]
 80030d8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2222      	movs	r2, #34	; 0x22
 80030e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030fe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0220 	orr.w	r2, r2, #32
 800311e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	e000      	b.n	8003126 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003124:	2302      	movs	r3, #2
  }
}
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr

08003130 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	4613      	mov	r3, r2
 800313c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b20      	cmp	r3, #32
 8003148:	d153      	bne.n	80031f2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <HAL_UART_Transmit_DMA+0x26>
 8003150:	88fb      	ldrh	r3, [r7, #6]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e04c      	b.n	80031f4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_UART_Transmit_DMA+0x38>
 8003164:	2302      	movs	r3, #2
 8003166:	e045      	b.n	80031f4 <HAL_UART_Transmit_DMA+0xc4>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	88fa      	ldrh	r2, [r7, #6]
 800317a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	88fa      	ldrh	r2, [r7, #6]
 8003180:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2221      	movs	r2, #33	; 0x21
 800318c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	4a19      	ldr	r2, [pc, #100]	; (80031fc <HAL_UART_Transmit_DMA+0xcc>)
 8003196:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	4a18      	ldr	r2, [pc, #96]	; (8003200 <HAL_UART_Transmit_DMA+0xd0>)
 800319e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	4a17      	ldr	r2, [pc, #92]	; (8003204 <HAL_UART_Transmit_DMA+0xd4>)
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	2200      	movs	r2, #0
 80031ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80031b0:	f107 0308 	add.w	r3, r7, #8
 80031b4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	6819      	ldr	r1, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3304      	adds	r3, #4
 80031c4:	461a      	mov	r2, r3
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	f7fe faea 	bl	80017a0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031d4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695a      	ldr	r2, [r3, #20]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031ec:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	e000      	b.n	80031f4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80031f2:	2302      	movs	r3, #2
  }
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	08003425 	.word	0x08003425
 8003200:	08003477 	.word	0x08003477
 8003204:	08003493 	.word	0x08003493

08003208 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003228:	2300      	movs	r3, #0
 800322a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10d      	bne.n	800325a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_UART_IRQHandler+0x52>
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fa64 	bl	8003720 <UART_Receive_IT>
      return;
 8003258:	e0cc      	b.n	80033f4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 80ab 	beq.w	80033b8 <HAL_UART_IRQHandler+0x1b0>
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d105      	bne.n	8003278 <HAL_UART_IRQHandler+0x70>
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80a0 	beq.w	80033b8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_UART_IRQHandler+0x90>
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003290:	f043 0201 	orr.w	r2, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <HAL_UART_IRQHandler+0xb0>
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b0:	f043 0202 	orr.w	r2, r3, #2
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <HAL_UART_IRQHandler+0xd0>
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d0:	f043 0204 	orr.w	r2, r3, #4
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <HAL_UART_IRQHandler+0xf0>
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f0:	f043 0208 	orr.w	r2, r3, #8
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d078      	beq.n	80033f2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f003 0320 	and.w	r3, r3, #32
 8003306:	2b00      	cmp	r3, #0
 8003308:	d007      	beq.n	800331a <HAL_UART_IRQHandler+0x112>
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 fa03 	bl	8003720 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf14      	ite	ne
 8003328:	2301      	movne	r3, #1
 800332a:	2300      	moveq	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d102      	bne.n	8003342 <HAL_UART_IRQHandler+0x13a>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d031      	beq.n	80033a6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f94e 	bl	80035e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003352:	2b00      	cmp	r3, #0
 8003354:	d023      	beq.n	800339e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695a      	ldr	r2, [r3, #20]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003364:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	2b00      	cmp	r3, #0
 800336c:	d013      	beq.n	8003396 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003372:	4a22      	ldr	r2, [pc, #136]	; (80033fc <HAL_UART_IRQHandler+0x1f4>)
 8003374:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe fa70 	bl	8001860 <HAL_DMA_Abort_IT>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d016      	beq.n	80033b4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003390:	4610      	mov	r0, r2
 8003392:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003394:	e00e      	b.n	80033b4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f83b 	bl	8003412 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800339c:	e00a      	b.n	80033b4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f837 	bl	8003412 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a4:	e006      	b.n	80033b4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f833 	bl	8003412 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80033b2:	e01e      	b.n	80033f2 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b4:	bf00      	nop
    return;
 80033b6:	e01c      	b.n	80033f2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d008      	beq.n	80033d4 <HAL_UART_IRQHandler+0x1cc>
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f93a 	bl	8003646 <UART_Transmit_IT>
    return;
 80033d2:	e00f      	b.n	80033f4 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <HAL_UART_IRQHandler+0x1ec>
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f981 	bl	80036f0 <UART_EndTransmit_IT>
    return;
 80033ee:	bf00      	nop
 80033f0:	e000      	b.n	80033f4 <HAL_UART_IRQHandler+0x1ec>
    return;
 80033f2:	bf00      	nop
  }
}
 80033f4:	3720      	adds	r7, #32
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	0800361f 	.word	0x0800361f

08003400 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr

08003412 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d113      	bne.n	8003468 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695a      	ldr	r2, [r3, #20]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003454:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003464:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003466:	e002      	b.n	800346e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f7fd f8e1 	bl	8000630 <HAL_UART_TxCpltCallback>
}
 800346e:	bf00      	nop
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b084      	sub	sp, #16
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f7ff ffbb 	bl	8003400 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800348a:	bf00      	nop
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b084      	sub	sp, #16
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800349a:	2300      	movs	r3, #0
 800349c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	bf14      	ite	ne
 80034b2:	2301      	movne	r3, #1
 80034b4:	2300      	moveq	r3, #0
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b21      	cmp	r3, #33	; 0x21
 80034c4:	d108      	bne.n	80034d8 <UART_DMAError+0x46>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2200      	movs	r2, #0
 80034d0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80034d2:	68b8      	ldr	r0, [r7, #8]
 80034d4:	f000 f871 	bl	80035ba <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	bf14      	ite	ne
 80034e6:	2301      	movne	r3, #1
 80034e8:	2300      	moveq	r3, #0
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b22      	cmp	r3, #34	; 0x22
 80034f8:	d108      	bne.n	800350c <UART_DMAError+0x7a>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2200      	movs	r2, #0
 8003504:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003506:	68b8      	ldr	r0, [r7, #8]
 8003508:	f000 f86c 	bl	80035e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003510:	f043 0210 	orr.w	r2, r3, #16
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003518:	68b8      	ldr	r0, [r7, #8]
 800351a:	f7ff ff7a 	bl	8003412 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800351e:	bf00      	nop
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	603b      	str	r3, [r7, #0]
 8003532:	4613      	mov	r3, r2
 8003534:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003536:	e02c      	b.n	8003592 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353e:	d028      	beq.n	8003592 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d007      	beq.n	8003556 <UART_WaitOnFlagUntilTimeout+0x30>
 8003546:	f7fd fad3 	bl	8000af0 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	429a      	cmp	r2, r3
 8003554:	d21d      	bcs.n	8003592 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003564:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695a      	ldr	r2, [r3, #20]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0201 	bic.w	r2, r2, #1
 8003574:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e00f      	b.n	80035b2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4013      	ands	r3, r2
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	429a      	cmp	r2, r3
 80035a0:	bf0c      	ite	eq
 80035a2:	2301      	moveq	r3, #1
 80035a4:	2300      	movne	r3, #0
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	461a      	mov	r2, r3
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d0c3      	beq.n	8003538 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80035d0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2220      	movs	r2, #32
 80035d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr

080035e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0201 	bic.w	r2, r2, #1
 800360a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr

0800361e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b084      	sub	sp, #16
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f7ff feea 	bl	8003412 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800363e:	bf00      	nop
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003646:	b480      	push	{r7}
 8003648:	b085      	sub	sp, #20
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b21      	cmp	r3, #33	; 0x21
 8003658:	d144      	bne.n	80036e4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003662:	d11a      	bne.n	800369a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003678:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d105      	bne.n	800368e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	1c9a      	adds	r2, r3, #2
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	621a      	str	r2, [r3, #32]
 800368c:	e00e      	b.n	80036ac <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	621a      	str	r2, [r3, #32]
 8003698:	e008      	b.n	80036ac <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	1c59      	adds	r1, r3, #1
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6211      	str	r1, [r2, #32]
 80036a4:	781a      	ldrb	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4619      	mov	r1, r3
 80036ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10f      	bne.n	80036e0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	e000      	b.n	80036e6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80036e4:	2302      	movs	r3, #2
  }
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003706:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7fc ff8d 	bl	8000630 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b22      	cmp	r3, #34	; 0x22
 8003732:	d171      	bne.n	8003818 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800373c:	d123      	bne.n	8003786 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10e      	bne.n	800376a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	b29b      	uxth	r3, r3
 8003754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003762:	1c9a      	adds	r2, r3, #2
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	629a      	str	r2, [r3, #40]	; 0x28
 8003768:	e029      	b.n	80037be <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	b29b      	uxth	r3, r3
 8003772:	b2db      	uxtb	r3, r3
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	629a      	str	r2, [r3, #40]	; 0x28
 8003784:	e01b      	b.n	80037be <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10a      	bne.n	80037a4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6858      	ldr	r0, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003798:	1c59      	adds	r1, r3, #1
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6291      	str	r1, [r2, #40]	; 0x28
 800379e:	b2c2      	uxtb	r2, r0
 80037a0:	701a      	strb	r2, [r3, #0]
 80037a2:	e00c      	b.n	80037be <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b0:	1c58      	adds	r0, r3, #1
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	6288      	str	r0, [r1, #40]	; 0x28
 80037b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	4619      	mov	r1, r3
 80037cc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d120      	bne.n	8003814 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0220 	bic.w	r2, r2, #32
 80037e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695a      	ldr	r2, [r3, #20]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0201 	bic.w	r2, r2, #1
 8003800:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fc ff42 	bl	8000694 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	e002      	b.n	800381a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	e000      	b.n	800381a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003818:	2302      	movs	r3, #2
  }
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
	...

08003824 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	4313      	orrs	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800385e:	f023 030c 	bic.w	r3, r3, #12
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6812      	ldr	r2, [r2, #0]
 8003866:	68f9      	ldr	r1, [r7, #12]
 8003868:	430b      	orrs	r3, r1
 800386a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a52      	ldr	r2, [pc, #328]	; (80039d0 <UART_SetConfig+0x1ac>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d14e      	bne.n	800392a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800388c:	f7fe ff06 	bl	800269c <HAL_RCC_GetPCLK2Freq>
 8003890:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	4613      	mov	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	009a      	lsls	r2, r3, #2
 800389c:	441a      	add	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a8:	4a4a      	ldr	r2, [pc, #296]	; (80039d4 <UART_SetConfig+0x1b0>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	0119      	lsls	r1, r3, #4
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	009a      	lsls	r2, r3, #2
 80038bc:	441a      	add	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80038c8:	4b42      	ldr	r3, [pc, #264]	; (80039d4 <UART_SetConfig+0x1b0>)
 80038ca:	fba3 0302 	umull	r0, r3, r3, r2
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	2064      	movs	r0, #100	; 0x64
 80038d2:	fb00 f303 	mul.w	r3, r0, r3
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	3332      	adds	r3, #50	; 0x32
 80038dc:	4a3d      	ldr	r2, [pc, #244]	; (80039d4 <UART_SetConfig+0x1b0>)
 80038de:	fba2 2303 	umull	r2, r3, r2, r3
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038e8:	4419      	add	r1, r3
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	009a      	lsls	r2, r3, #2
 80038f4:	441a      	add	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003900:	4b34      	ldr	r3, [pc, #208]	; (80039d4 <UART_SetConfig+0x1b0>)
 8003902:	fba3 0302 	umull	r0, r3, r3, r2
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	2064      	movs	r0, #100	; 0x64
 800390a:	fb00 f303 	mul.w	r3, r0, r3
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	3332      	adds	r3, #50	; 0x32
 8003914:	4a2f      	ldr	r2, [pc, #188]	; (80039d4 <UART_SetConfig+0x1b0>)
 8003916:	fba2 2303 	umull	r2, r3, r2, r3
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	f003 020f 	and.w	r2, r3, #15
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	440a      	add	r2, r1
 8003926:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003928:	e04d      	b.n	80039c6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800392a:	f7fe fea3 	bl	8002674 <HAL_RCC_GetPCLK1Freq>
 800392e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	4613      	mov	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	009a      	lsls	r2, r3, #2
 800393a:	441a      	add	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	fbb2 f3f3 	udiv	r3, r2, r3
 8003946:	4a23      	ldr	r2, [pc, #140]	; (80039d4 <UART_SetConfig+0x1b0>)
 8003948:	fba2 2303 	umull	r2, r3, r2, r3
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	0119      	lsls	r1, r3, #4
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	009a      	lsls	r2, r3, #2
 800395a:	441a      	add	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	fbb2 f2f3 	udiv	r2, r2, r3
 8003966:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <UART_SetConfig+0x1b0>)
 8003968:	fba3 0302 	umull	r0, r3, r3, r2
 800396c:	095b      	lsrs	r3, r3, #5
 800396e:	2064      	movs	r0, #100	; 0x64
 8003970:	fb00 f303 	mul.w	r3, r0, r3
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	3332      	adds	r3, #50	; 0x32
 800397a:	4a16      	ldr	r2, [pc, #88]	; (80039d4 <UART_SetConfig+0x1b0>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	095b      	lsrs	r3, r3, #5
 8003982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003986:	4419      	add	r1, r3
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	009a      	lsls	r2, r3, #2
 8003992:	441a      	add	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	fbb2 f2f3 	udiv	r2, r2, r3
 800399e:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <UART_SetConfig+0x1b0>)
 80039a0:	fba3 0302 	umull	r0, r3, r3, r2
 80039a4:	095b      	lsrs	r3, r3, #5
 80039a6:	2064      	movs	r0, #100	; 0x64
 80039a8:	fb00 f303 	mul.w	r3, r0, r3
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	3332      	adds	r3, #50	; 0x32
 80039b2:	4a08      	ldr	r2, [pc, #32]	; (80039d4 <UART_SetConfig+0x1b0>)
 80039b4:	fba2 2303 	umull	r2, r3, r2, r3
 80039b8:	095b      	lsrs	r3, r3, #5
 80039ba:	f003 020f 	and.w	r2, r3, #15
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	440a      	add	r2, r1
 80039c4:	609a      	str	r2, [r3, #8]
}
 80039c6:	bf00      	nop
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40013800 	.word	0x40013800
 80039d4:	51eb851f 	.word	0x51eb851f

080039d8 <__libc_init_array>:
 80039d8:	b570      	push	{r4, r5, r6, lr}
 80039da:	2500      	movs	r5, #0
 80039dc:	4e0c      	ldr	r6, [pc, #48]	; (8003a10 <__libc_init_array+0x38>)
 80039de:	4c0d      	ldr	r4, [pc, #52]	; (8003a14 <__libc_init_array+0x3c>)
 80039e0:	1ba4      	subs	r4, r4, r6
 80039e2:	10a4      	asrs	r4, r4, #2
 80039e4:	42a5      	cmp	r5, r4
 80039e6:	d109      	bne.n	80039fc <__libc_init_array+0x24>
 80039e8:	f000 f822 	bl	8003a30 <_init>
 80039ec:	2500      	movs	r5, #0
 80039ee:	4e0a      	ldr	r6, [pc, #40]	; (8003a18 <__libc_init_array+0x40>)
 80039f0:	4c0a      	ldr	r4, [pc, #40]	; (8003a1c <__libc_init_array+0x44>)
 80039f2:	1ba4      	subs	r4, r4, r6
 80039f4:	10a4      	asrs	r4, r4, #2
 80039f6:	42a5      	cmp	r5, r4
 80039f8:	d105      	bne.n	8003a06 <__libc_init_array+0x2e>
 80039fa:	bd70      	pop	{r4, r5, r6, pc}
 80039fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a00:	4798      	blx	r3
 8003a02:	3501      	adds	r5, #1
 8003a04:	e7ee      	b.n	80039e4 <__libc_init_array+0xc>
 8003a06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a0a:	4798      	blx	r3
 8003a0c:	3501      	adds	r5, #1
 8003a0e:	e7f2      	b.n	80039f6 <__libc_init_array+0x1e>
 8003a10:	08003a88 	.word	0x08003a88
 8003a14:	08003a88 	.word	0x08003a88
 8003a18:	08003a88 	.word	0x08003a88
 8003a1c:	08003a8c 	.word	0x08003a8c

08003a20 <memset>:
 8003a20:	4603      	mov	r3, r0
 8003a22:	4402      	add	r2, r0
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d100      	bne.n	8003a2a <memset+0xa>
 8003a28:	4770      	bx	lr
 8003a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a2e:	e7f9      	b.n	8003a24 <memset+0x4>

08003a30 <_init>:
 8003a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a32:	bf00      	nop
 8003a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a36:	bc08      	pop	{r3}
 8003a38:	469e      	mov	lr, r3
 8003a3a:	4770      	bx	lr

08003a3c <_fini>:
 8003a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3e:	bf00      	nop
 8003a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a42:	bc08      	pop	{r3}
 8003a44:	469e      	mov	lr, r3
 8003a46:	4770      	bx	lr
